#!/usr/bin/env python

from distutils.core import setup, Extension, Distribution
import distutils.sysconfig
import sys
import os.path
from Pootle import __version__
from Pootle import __doc__
try:
  import py2exe
except ImportError:
  py2exe = None

# TODO: check out installing into a different path with --prefix/--home

join = os.path.join

pootleversion = __version__.ver

packagesdir = distutils.sysconfig.get_python_lib()
sitepackages = packagesdir.replace(sys.prefix + os.sep, '')

infofiles = [(join(sitepackages,'Pootle'),
             [join('Pootle',filename) for filename in 'ChangeLog', 'COPYING', 'LICENSE', 'README'])]
initfiles = [(join(sitepackages,'Pootle'),[join('Pootle','__init__.py')])]

packages = ["Pootle"]
translatescripts = [join('Pootle', 'PootleServer')]

def import_setup_module(modulename, modulepath):
  import imp
  modfile, pathname, description = imp.find_module(modulename, [modulepath])
  return imp.load_module(modulename, modfile, pathname, description)

def map_data_file (data_file):
  """remaps a data_file (could be a directory) to a different location
  This version gets rid of Lib\\site-packages, etc"""
  data_parts = data_file.split(os.sep)
  if data_parts[:2] == ["Lib", "site-packages"]:
    data_parts = data_parts[2:]
    if data_parts:
      data_file = os.path.join(*data_parts)
    else:
      data_file = ""
  if data_parts[:1] == ["Pootle"]:
    data_parts = data_parts[1:]
    if data_parts:
      data_file = os.path.join(*data_parts)
    else:
      data_file = ""
  return data_file

def getdatafiles():
  # TODO: add pootle.prefs, Pootle/html
  datafiles = initfiles + infofiles
  def listfiles(srcdir):
    return join(sitepackages, srcdir), [join(srcdir, f) for f in os.listdir(srcdir) if os.path.isfile(join(srcdir, f))]
  pootlefiles = [(join(sitepackages, 'Pootle'), [join('Pootle', 'pootle.prefs')])]
  pootlefiles.append(listfiles(join('Pootle', 'html')))
  pootlefiles.append(listfiles(join('Pootle', 'html', 'images')))
  pootlefiles.append(listfiles(join('Pootle', 'html', 'js')))
  datafiles += pootlefiles
  return datafiles

def buildinfolinks():
  linkfile = getattr(os, 'symlink', None)
  import shutil
  if linkfile is None:
    linkfile = shutil.copy2
  basedir = os.path.abspath(os.curdir)
  os.chdir("Pootle")
  if os.path.exists("LICENSE"):
    os.remove("LICENSE")
  linkfile("COPYING", "LICENSE")
  os.chdir(basedir)
  for filename in ["COPYING", "README", "LICENSE"]:
    if os.path.exists(filename):
      os.remove(filename)
    linkfile(os.path.join("Pootle", filename), filename)

def buildmanifest_in(file, scripts):
  """This writes the required files to a MANIFEST.in file"""
  print >>file, "# MANIFEST.in: the below autogenerated by pootlesetup.py from Pootle %s" % pootleversion
  print >>file, "# things needed by translate setup.py to rebuild"
  print >>file, "# informational files"
  for filename in ("README", "TODO", "ChangeLog", "COPYING", "LICENSE", "*.txt"):
    print >>file, "global-include %s" % filename
  print >> file, "# scripts which don't get included by default in sdist"
  for scriptname in scripts:
    print >>file, "include %s" % scriptname
  # wordlist, portal are in the source tree but unconnected to the python code
  print >>file, "prune wordlist"
  print >>file, "prune portal"
  # translate toolkit is in the same source tree but distributed separately
  print >>file, "prune translate"
  print >>file, "include Pootle/*.prefs"
  print >>file, "graft Pootle/html"
  print >>file, "prune Pootle/po"
  print >>file, "# MANIFEST.in: the above autogenerated by pootlesetup.py from Pootle %s" % pootleversion

def fix_bdist_rpm(setupfile):
    """Fixes bdist_rpm to use the given setup filename instead of setup.py"""
    try:
        from distutils.command import bdist_rpm
        build_rpm = bdist_rpm.bdist_rpm
    except ImportError:
        return
    if not hasattr(build_rpm, "_make_spec_file"):
        return
    orig_make_spec_file = build_rpm._make_spec_file
    def fixed_make_spec_file(self):
        """Generate the text of an RPM spec file and return it as a
        list of strings (one per line).
        """
        orig_spec_file = orig_make_spec_file(self)
        return [line.replace("setup.py", setupfile) for line in orig_spec_file]
    build_rpm._make_spec_file = fixed_make_spec_file

class PootleDistribution(Distribution):
  """a modified distribution class for translate"""
  def __init__(self, attrs):
    baseattrs = {}
    py2exeoptions = {}
    py2exeoptions["packages"] = ["Pootle", "encodings"]
    py2exeoptions["compressed"] = True
    py2exeoptions["excludes"] = ["PyLucene"]
    version = attrs.get("version", pootleversion)
    py2exeoptions["dist_dir"] = "Pootle-%s" % version
    options = {"py2exe": py2exeoptions}
    baseattrs['options'] = options
    if py2exe:
      self.com_server = []
      self.service = []
      self.windows = []
      self.isapi = []
      self.console = translatescripts
      self.zipfile = "Pootle.zip"
      if includepootle:
        import jToolkitSetup
        baseattrs['cmdclass'] = {"innosetup": jToolkitSetup.build_installer}
        options["innosetup"] = py2exeoptions.copy()
        options["innosetup"]["install_script"] = []
        jToolkitSetup.exclude_python_file(join("jToolkit", "data", "ADODB.py"))
        jToolkitSetup.map_data_file = map_data_file
    baseattrs.update(attrs)
    fix_bdist_rpm(os.path.basename(__file__))
    Distribution.__init__(self, baseattrs)

def standardsetup(name, version, custompackages=[], customdatafiles=[]):
  buildinfolinks()
  # TODO: make these end with .py ending on Windows...
  try:
    manifest_in = open("MANIFEST.in", "w")
    buildmanifest_in(manifest_in, translatescripts)
    manifest_in.close()
  except IOError, e:
    print >> sys.stderr, "warning: could not recreate MANIFEST.in, continuing anyway. Error was %s" % e
  datafiles = getdatafiles()
  ext_modules = []
  dosetup(name, version, packages + custompackages, datafiles + customdatafiles, translatescripts, ext_modules)

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU General Public License (GPL)",
  "Programming Language :: Python",
  "Topic :: Software Development :: Localization",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Operating System :: OS Independent",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: Unix"
  ]

def dosetup(name, version, packages, datafiles, scripts, ext_modules=[]):
  long_description = __doc__
  description = __doc__.split("\n", 1)[0]
  setup(name=name,
        version=version,
        license="GNU General Public License (GPL)",
        description=description,
        long_description=long_description,
        author="David Fraser, translate.org.za",
        author_email="translate-devel@lists.sourceforge.net",
        url="http://translate.sourceforge.net/",
        download_url="http://sourceforge.net/project/showfiles.php?group_id=91920&package_id=97082",
        platforms=["any"],
        classifiers=classifiers,
        packages=packages,
        data_files=datafiles,
        scripts=scripts,
        ext_modules=ext_modules,
        distclass=PootleDistribution
        )

if __name__ == "__main__":
  standardsetup("Pootle", pootleversion)

