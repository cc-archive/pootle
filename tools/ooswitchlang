#!/usr/bin/env python

"""A GUI for changing OpenOffice.org language selection"""

import wx
import os
import ConfigParser
import urlparse
import urllib
import operator
from translate.misc import xmlwrapper
from translate import __version__

# TODO: find a way to list the available languages outside the code
availablelanguages = {'en-US': 'English (US)', 'af': 'Afrikaans', 'ns': 'Sesotho sa Leboa', 'tn': 'Setswana', 'zu': 'IsiZulu'}

class oosetupfile(xmlwrapper.XMLWrapper):
  """this represents an openoffice.org Setup.xcu file"""
  def __init__(self, setupfile):
    self.setupfile = setupfile
    if not os.path.isfile(self.setupfile):
      raise ValueError("Could not find setup file: %s" % self.setupfile)
    contents = open(self.setupfile, 'r').read()
    root = xmlwrapper.BuildTree(contents)
    xmlwrapper.XMLWrapper.__init__(self, root)

  def getcurrentlanguage(self):
    """Reads the current language attribute"""
    for node in self.getchildren("node"):
      if node.getattr("name") == "L10N":
        for prop in self.getchildren("prop"):
          if prop.getattr("name") == "ooLocale":
            language = prop.getplaintext().strip()
            return language
    raise ValueError("Error finding language node")

  def setcurrentlanguage(self, language):
    """Changes the current language attribute"""
    for node in self.getchildren("node"):
      if node.getattr("name") == "L10N":
        for prop in self.getchildren("prop"):
          if prop.getattr("name") == "ooLocale":
            value = prop.getchild("value")
            value.obj.text = language
            return
    raise ValueError("Error finding language node")

  def savetofile(self, filename=None):
    """Saves the language to the file"""
    if filename is None:
      filename = self.setupfile
    oonamespace = {'http://openoffice.org/2001/registry': 'oor', 'http://www.w3.org/2001/XMLSchema': 'xs'}
    self.obj.attrib['xmlns:xs'] = "http://www.w3.org/2001/XMLSchema"
    # this fixes up the namespaces, otherwise OOo bombs
    # anyway we use the setofficelang executable to do this, so this is just for show...
    xmlwrapper.ElementTree.fixtag = xmlwrapper.makefixtagproc(oonamespace)
    self.write(open(filename, 'w'))

class ooconfigurator:
  """manages an open office configuration in a given directory"""
  def __init__(self, installdir):
    self.installdir = installdir
    adminsetupfilename = os.path.join(self.installdir, 'share', 'registry', 'data', 'org', 'openoffice', 'Setup.xcu')
    usersetupfilename = os.path.join(self.installdir, 'user', 'registry', 'data', 'org', 'openoffice', 'Setup.xcu')
    try:
      self.adminsetupfile = oosetupfile(adminsetupfilename)
    except ValueError:
      self.adminsetupfile = None
    try:
      self.usersetupfile = oosetupfile(usersetupfilename)
    except ValueError:
      self.usersetupfile = None

  def getadminlanguage(self):
    """gets the language set as default for all users"""
    if self.adminsetupfile:
      try:
        return self.adminsetupfile.getcurrentlanguage()
      except ValueError:
        pass
    return None

  def getuserlanguage(self):
    """gets the language set for this user"""
    if self.usersetupfile:
      try:
        return self.usersetupfile.getcurrentlanguage()
      except ValueError:
        pass
    return self.getadminlanguage()

  def setofficelang(self, newisocode, admin=False, force=False):
    """sets the language using the setofficelang program"""
    programdir = os.path.join(self.installdir, "program")
    cmdline = []
    for ext in 'bin', 'exe':
      binname = os.path.join(programdir, 'setofficelang' + os.path.extsep + ext)
      if os.path.exists(binname):
        cmdline.append('"' + binname + '"')
        break
    if not cmdline:
      raise IOError("Could not find setofficelang executable in %s" % programdir)
    if admin: cmdline.append("-a")
    if force: cmdline.append("-f")
    cmdline.append(newisocode)
    cmdline = " ".join(cmdline)
    wx.BeginBusyCursor()
    retcode = os.system(cmdline)
    wx.EndBusyCursor()
    if retcode == 1:
      raise ValueError("The language is not supported by this office installation")
    elif retcode == 2:
      raise ValueError("Invalid arguments")
    elif retcode == 3:
      raise ValueError("An internal error occurred")
    elif retcode:
      raise ValueError("Unknown error: %d" % retcode)

class ooinstallmanager(ConfigParser.RawConfigParser):
  """class for indexing multiple installations of openoffice.org"""
  def __init__(self):
    ConfigParser.RawConfigParser.__init__(self)
    versionfilenames = self.findsversionfiles()
    self.read(versionfilenames)

  def findsversionfiles(self):
    """finds the .sversionrc or sversion.ini file"""
    possibledirs = []
    if os.name == 'posix':
      rcname = '.sversionrc'
      possibledirs = [os.getenv("HOME", ''), '/etc']
    else:
      rcname = 'sversion.ini'
      possibledirs = [os.getenv("HOME", ''), os.getenv("USERPROFILE"), os.getenv("SYSTEMROOT")]
      for possibledir in possibledirs:
        appdatadir = os.path.join(possibledir, "Application Data")
        if os.path.isdir(appdatadir):
          possibledirs.append(appdatadir)
    versionfiles = []
    for possibledir in possibledirs:
      rcfilename = os.path.join(possibledir, rcname)
      if os.path.isfile(rcfilename):
        versionfiles.append(rcfilename)
    return versionfiles

  def versions(self):
    """returns a list of version names and directories"""
    versionlist = []
    for versionname, versionurl in self.items("Versions"):
      try:
        versiondir = self.urltopath(versionurl)
      except ValueError, e:
        wx.LogVerbose("could not find version %s: %s" % (versionname, e))
        continue
      versionlist.append((versionname, versiondir))
    return versionlist

  def urltopath(self, versionurl):
    """converts a versionurl to a local path"""
    scheme, location, path, params, query, fragment = urlparse.urlparse(versionurl)
    path = urllib.url2pathname(path)
    if scheme.lower() != 'file' or location.lower() not in ('', 'localhost'):
      raise ValueError("unable to handle non-local installation location: %s" % versionurl)
    elif not os.path.isdir(path):
      # different-to-expected number of slashes cause problems on Windows
      if path.startswith(os.sep):
        path = path.replace(os.sep, '', 1)
        if os.path.isdir(path):
          return path
      raise ValueError("could not find install directory: %s" % path)
    return path
      
class LanguageSelectionWindow(wx.Frame):
  """Window for selecting language"""
  def __init__(self, parent, id, title, advancedmode):
    self.advancedmode = advancedmode
    wx.Frame.__init__(self, parent, id, title)
    self.panel = wx.Panel(self, wx.ID_ANY)
    versions = ooinstallmanager().versions()
    self.versions = dict(versions)
    self.createoptioncontrols()
    self.advancedcontrols = [self.versionlabel, self.versionchoice, self.dirlabel, self.dirbox, self.dirbrowse,
                             self.adminlabel, self.adminchoice, self.forcelabel, self.forcechoice]
    self.optionssizer = wx.FlexGridSizer(0, 2, 0, 0)

    self.applybutton = wx.Button(self.panel, wx.ID_ANY, "Apply Changes")
    self.applybutton.SetToolTipString("Apply the changes you have made")
    wx.EVT_BUTTON(self, self.applybutton.GetId(), self.OnApply)
    self.cancelbutton = wx.Button(self.panel, wx.ID_ANY, "Cancel")
    self.cancelbutton.SetToolTipString("Exit without applying changes")
    wx.EVT_BUTTON(self, self.cancelbutton.GetId(), self.OnCancel)
    self.advancedbutton = wx.Button(self.panel, wx.ID_ANY, "")
    wx.EVT_BUTTON(self, self.advancedbutton.GetId(), self.OnSwitchAdvanced)
    self.buttonsizer = wx.BoxSizer(wx.HORIZONTAL)
    self.buttonsizer.Add(self.applybutton)
    self.buttonsizer.Add(self.cancelbutton)
    self.buttonsizer.Add(self.advancedbutton)

    self.sizer = wx.BoxSizer(wx.VERTICAL)
    self.sizer.Add(self.optionssizer)
    self.sizer.Add(self.buttonsizer)
    self.arrangeoptioncontrols()
    self.panel.SetAutoLayout(1)
    self.panel.SetSizer(self.sizer)

    self.findcurrentversion()
    self.Show(1)
    self.AutoSize()

  def AutoSize(self):
    """automatically guesses the best size"""
    self.panel.SetClientSize(self.panel.GetBestSize())
    self.SetClientSize(self.GetBestSize())

  def createoptioncontrols(self):
    """creates all the options controls needed..."""
    self.versionlabel = wx.StaticText(self.panel, wx.ID_ANY, "Select version:")
    versionnames = self.versions.keys()
    versionnames.append("(other)")
    self.versionchoice = wx.Choice(self.panel, wx.ID_ANY, choices = versionnames)
    self.versionchoice.SetToolTipString("The OpenOffice.org version to operate on")
    wx.EVT_CHOICE(self, self.versionchoice.GetId(), self.OnSetVersion)

    self.dirlabel = wx.StaticText(self.panel, wx.ID_ANY, "Installation directory:")
    self.dirbox = wx.TextCtrl(self.panel, wx.ID_ANY, style=wx.TE_PROCESS_ENTER, size=(200,-1))
    self.dirbox.SetToolTipString("The OpenOffice.org installation directory")
    self.dirbrowse = wx.Button(self.panel, wx.ID_ANY, "Browse...")
    self.dirbrowse.SetToolTipString("Find another OpenOffice.org directory")
    wx.EVT_BUTTON(self, self.dirbrowse.GetId(), self.OnBrowse)
    wx.EVT_TEXT_ENTER(self, self.dirbox.GetId(), self.OnSetInstallDir)

    self.languagelabel = wx.StaticText(self.panel, wx.ID_ANY, "Select language:")
    self.languages = availablelanguages
    self.languagenames = self.languages.values()
    self.languagenames.sort()
    self.languagelist = wx.ListBox(self.panel, wx.ID_ANY, choices=self.languagenames)
    self.languagelist.SetToolTipString("Select the language you would like to run OpenOffice.org in")

    self.adminlabel = wx.StaticText(self.panel, wx.ID_ANY, "Change language for:")
    self.adminchoice = wx.Choice(self.panel, wx.ID_ANY, choices=["User", "System default"])
    self.adminchoice.SetToolTipString("Select whether to set the default or the user setting")
    self.adminchoice.SetSelection(0)
    wx.EVT_CHOICE(self, self.adminchoice.GetId(), self.OnSetAdmin)
    self.forcelabel = wx.StaticText(self.panel, wx.ID_ANY, "Assume language is valid:")
    self.forcechoice = wx.CheckBox(self.panel, wx.ID_ANY, "")
    self.forcechoice.SetToolTipString("Ignores the list of valid languages defined for this installation")
    self.forcechoice.SetValue(True)

  def arrangeoptioncontrols(self):
    """arranges all the option controls using a sizer"""
    optionslayout = [(self.versionlabel, self.versionchoice),
                     (self.dirlabel, self.dirbox),
                     (self.adminlabel, self.adminchoice),
                     (self.languagelabel, self.languagelist),
                     (self.forcelabel, self.forcechoice)]
    self.optionssizer.Clear()
    for label, control in optionslayout:
      row = self.optionssizer.GetRows()
      if label in self.advancedcontrols and not self.advancedmode:
        continue
      self.optionssizer.Add(label, row, wx.ALIGN_LEFT|wx.ALIGN_TOP|wx.ALL, 5)
      if control == self.dirbox:
        self.dirsizer = wx.BoxSizer(wx.HORIZONTAL)
        self.dirsizer.Add(self.dirbox)
        self.dirsizer.Add(self.dirbrowse)
        self.optionssizer.Add(self.dirsizer, row, wx.ALIGN_LEFT|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5)
      else:
        self.optionssizer.Add(control, row, wx.ALIGN_LEFT|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5)
    for control in self.advancedcontrols:
      control.Show(self.advancedmode)
    if self.advancedmode:
      self.advancedbutton.SetLabel("Less...")
      self.advancedbutton.SetToolTipString("Switch to a simpler set of options")
    else:
      self.advancedbutton.SetLabel("More...")
      self.advancedbutton.SetToolTipString("Display the more advanced options")
    self.panel.Layout()
    self.AutoSize()

  def setinstalldir(self, installdir):
    """Sets the current installation we are working on..."""
    if os.path.exists(installdir):
      self.installdir = installdir
      self.config = ooconfigurator(installdir)
      self.showcurrentlanguage()
    else:
      wx.LogError("Could not find directory %s" % installdir)
      self.dirbox.SetFocus()

  def findregisteredversion(self, installdir):
    """checks if the given directory is a registered version"""
    # if we don't have os.path.samefile, just check if the paths are equal
    samefile = getattr(os.path, 'samefile', operator.eq)
    # make sure we are checking the normalized version of the path...
    installdir = os.path.normcase(os.path.normpath(installdir))
    for versionname, versiondir in self.versions.iteritems():
      if samefile(versiondir, installdir):
        return versionname
      else:
        normversiondir = os.path.normcase(os.path.normpath(versiondir))
        if installdir.startswith(normversiondir):
          return versionname
    return None

  def findcurrentversion(self):
    """Tries to find the current installation"""
    currentdir = os.getcwd()
    # see if the current directory is in one of the described versions
    versionname = self.findregisteredversion(currentdir)
    if versionname:
      versiondir = self.versions[versionname]
      self.versionchoice.SetStringSelection(versionname)
      self.dirbox.SetValue(versiondir)
      self.setinstalldir(versiondir)
      return
    # see if the current directory is an openoffice.org directory anyway...
    for versiondir in (currentdir, os.path.dirname(currentdir)):
      if os.path.isdir(os.path.join(versiondir, 'share', 'registry', 'data', 'org', 'openoffice')):
        self.versionchoice.SetStringSelection("(other)")
        self.dirbox.SetValue(versiondir)
        self.setinstalldir(versiondir)
        return
    # otherwise use the first valid version...
    self.versionchoice.SetSelection(0)
    versiondir = self.versions[self.versionchoice.GetStringSelection()]
    self.dirbox.SetValue(versiondir)
    self.setinstalldir(versiondir)

  def getadminmode(self):
    """returns wheter we are adjusting system defaults or user settings"""
    adminmode = self.adminchoice.GetSelection()
    if adminmode == 0:
      return False
    elif adminmode == 1:
      return True

  def getlanguage(self):
    """looks up the current language in the config files"""
    if self.getadminmode():
      return self.config.getadminlanguage()
    else:
      return self.config.getuserlanguage()

  def setlanguage(self, newisocode, admin, force):
    """changes the current language"""
    try:
      self.config.setofficelang(newisocode, admin=admin, force=force)
      wx.MessageBox("Setting language successful!\nYou may need to restart OpenOffice.org (including QuickStart)\n" + \
                    "in order for the changes to take effect", "OpenOffice.org Language", wx.OK, self)
      return True
    except ValueError, error:
      if force:
        wx.MessageBox("Error setting language:\n%s" % error, "OpenOffice.org Language", wx.ICON_ERROR | wx.OK, self)
      else:
        doforce = wx.MessageBox("Error setting language:\n%s\nWould you like to force the setting?" % error,
          "OpenOffice.org Language", wx.ICON_ERROR | wx.YES_NO, self)
        if doforce == wx.YES:
          return self.setlanguage(newisocode, admin, True)
      return False
    except IOError, error:
      wx.LogError("Error setting language:\n%s" % error)
      return False

  def showcurrentlanguage(self):
    """updates the GUI to display the current language"""
    currentisocode = self.getlanguage()
    currentlanguagename = self.languages.get(currentisocode, None)
    if currentlanguagename is not None:
      self.languagelist.SetStringSelection(currentlanguagename)
    else:
      if currentisocode is None:
        wx.LogWarning("Could not determine current language setting\nYou may have selected an invalid directory")
      else:
        wx.LogWarning("Current language code is %s, which is not supported by this language switcher" % currentisocode)

  def OnSetVersion(self, event):
    """Triggered when the current version is set..."""
    versionname = self.versionchoice.GetStringSelection()
    if versionname in self.versions:
      installdir = self.versions[versionname]
      self.dirbox.SetValue(installdir)
      self.setinstalldir(installdir)
    elif versionname == "(other)":
      self.dirbox.SetFocus()
    event.Skip()

  def OnSetInstallDir(self, event):
    """Triggered when the install directory is set..."""
    installdir = self.dirbox.GetValue()
    versionname = self.findregisteredversion(installdir)
    if versionname:
      self.versionchoice.SetStringSelection(versionname)
    else:
      self.versionchoice.SetStringSelection("(other)")
    self.setinstalldir(installdir)
    event.Skip()

  def OnBrowse(self, event):
    """The user wants to browse to find a directory..."""
    installdir = self.dirbox.GetValue()
    dirdialog = wx.DirDialog(self, "Choose a directory:", defaultPath=installdir)
    if dirdialog.ShowModal() == wx.ID_OK:
      installdir = dirdialog.GetPath()
      versionname = self.findregisteredversion(installdir)
      if versionname:
        self.versionchoice.SetStringSelection(versionname)
      else:
        self.versionchoice.SetStringSelection("(other)")
      self.dirbox.SetValue(installdir)
      self.setinstalldir(installdir)
    dirdialog.Destroy()
    event.Skip()

  def OnSetAdmin(self, event):
    """Sets whether or not we are using admin choices..."""
    self.showcurrentlanguage()
    event.Skip()

  def OnApply(self, event):
    """Apply the changes and quit"""
    currentlanguagename = self.languagelist.GetStringSelection()
    if currentlanguagename:
      currentisocode = None
      for isocode, languagename in self.languages.iteritems():
        if languagename == currentlanguagename:
          currentisocode = isocode
          break
      if currentisocode is None:
        wx.MessageBox("Error finding language code", "Error", wx.ICON_ERROR, self)
      else:
        admin = self.getadminmode()
        force = self.forcechoice.GetValue()
        if self.setlanguage(currentisocode, admin, force):
          self.Close(1)
    else:
      wx.MessageBox("First select a language (Cancel to quit)", "Error", wx.ICON_ERROR, self)

  def OnCancel(self, event):
    """Cancel without applying changes"""
    self.Close(1)

  def OnSwitchAdvanced(self, event):
    """Cancel without applying changes"""
    self.advancedmode = not self.advancedmode
    self.arrangeoptioncontrols()
    event.Skip()

# to build ooswitchlang exe: use Installer 6 alpha 2 (5b4 not compatible with python 2.3)
# set tools=x:\path\to\translate\tools
# wget http://davidf.sjsoft.com/mirrors/mcmillan-inc/dnld/installer_6a2.tar.gz
# tar xzf installer_6a2.tar.gz
# cd Installer
# python Configure.py
# python Makespec.py --onefile --noconsole --out ooswitchlang --icon %tools%\ooswitchlang.ico %tools%\ooswitchlang
# python Build.py ooswitchlang\ooswitchlang.spec
# this will produce ooswitchlang.exe in the Installer directory

if __name__ == '__main__':
  import optparse
  optparser = optparse.OptionParser(version="%prog "+__version__.ver, description=__doc__)
  optparser.add_option("-a", "--advanced", dest="advanced", action="store_true", default=False,
      help="Start in advanced mode")
  options, args = optparser.parse_args()
  app = wx.PySimpleApp()
  frame = LanguageSelectionWindow(None, -1, "OpenOffice.org Language", options.advanced)
  app.MainLoop()

