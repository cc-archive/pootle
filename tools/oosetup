#!/usr/bin/env python

"""tool for editing openoffice.org setup files"""

import codecs
from translate.misc import sparse
import sys
import operator
import os

class SetupIndex(sparse.SimpleParser):
  def __init__(self, filename=None):
    sparse.SimpleParser.__init__(self)
    self.defaulttokenlist.extend(';\n')
    self.whitespacechars = " \t\r"
    self.quotechars = ('"', '{')
    self.endquotechars = {'"':'"', '{':'}'}
    self.stringescaping = 0
    self.sectiontypes = ('ConfigurationItem', 'Custom', 'DataCarrier', 'Directory',
      'File', 'Folder', 'FolderItem', 'Function', 'HelpText', 'Installation', 'Module', 'Procedure',
      'Profile', 'ProfileItem', 'RegistryItem', 'Shortcut', 'StarRegistry', 'StarRegistryItem')
    self.definitions = {}
    self.bytype = {}
    self.referrals = []
    self.insertions = {}
    for sectiontype in self.sectiontypes:
      self.bytype[sectiontype] = {}
    if filename is not None:
      self.readfile(filename)

  def readfile(self, filename):
    self.filename = filename
    # f = codecs.open(self.filename, 'r', encoding='utf8')
    f = open(self.filename, 'r')
    contents = f.read()
    f.close()
    self.parse(contents)

  def parse(self, contents):
    self.tokenize(contents)
    self.originaltokens = self.tokens[:]
    tokennum = 0
    while tokennum < len(self.tokens):
      tokennum = self.parsesection(tokennum)

  def parsesection(self, tokennum):
    sectiontype = self.tokens[tokennum]
    if sectiontype not in self.sectiontypes:
      print >>sys.stderr, "unknown sectiontype....", sectiontype, "last section", sectionname
      if sectiontype not in self.bytype:
        self.bytype[sectiontype] = {}
    sectionname = self.tokens[tokennum + 1]
    section = {}
    if sectionname in self.definitions:
      print >>sys.stderr, "duplicate", sectionname
    self.definitions[sectionname] = section
    self.bytype[sectiontype][sectionname] = section
    section['type'] = sectiontype
    section['tokennums'] = {'start':tokennum}
    tokennum += 2
    while self.tokens[tokennum] == '\n':
      tokennum += 1
    while self.tokens[tokennum].lower() != 'end':
      varname = self.tokens[tokennum]
      if self.tokens[tokennum+1] != '=':
        print >>sys.stderr, "expected =...", sectiontype, sectionname, varname
      startvardef = tokennum+2
      nestlevel = 0
      while self.tokens[tokennum] != '\n' or nestlevel > 0:
        varpart = self.tokens[tokennum]
        if varpart.lower().startswith('gid_'):
          self.referrals.append((varpart, tokennum))
        if varpart == '(':
          nestlevel += 1
        elif varpart == ')':
          nestlevel -= 1
        tokennum += 1
      value = "".join(self.tokens[startvardef:tokennum])
      if value.endswith(";"): value = value[:-1]
      section[varname] = value
      section['tokennums'][varname] = startvardef - section['tokennums']['start']
      tokennum = tokennum + 1
    section['tokennums']['end'] = tokennum - section['tokennums']['start']
    tokennum += 1
    while tokennum < len(self.tokens) and self.tokens[tokennum] == '\n':
      tokennum += 1
    return tokennum

  def rename(self, sectionname, newname):
    section = self.definitions[sectionname]
    tokennum = section['tokennums']['start']
    self.tokens[tokennum+1] = newname
    for varpart, tokennum in self.referrals:
      if varpart.lower() == sectionname.lower():
        self.tokens[tokennum] = newname

  def insertforeignsection(self, aftersection, sectionname, section, index, tokenrange):
    tokennum = self.getsectionendtokennum(aftersection)
    while self.tokens[tokennum+1] == '\n':
      tokennum += 1
    self.definitions[sectionname] = section.copy()
    self.definitions[sectionname]['tokennums']['start'] = tokennum
    if tokennum in self.insertions:
      self.insertions[tokennum].append((index, tokenrange))
    else:
      self.insertions[tokennum] = [(index, tokenrange)]

  def getsource(self, start=None, end=None):
    sourceparts = []
    lastprint = 0
    if start is None:
      start = 0
    if end is None:
      end = len(self.tokens)
    tokenpos = 0
    for tokennum in range(start+1):
      tokenpos = self.source.find(self.originaltokens[tokennum], tokenpos)
    for tokennum in range(start, end):
      originaltoken = self.originaltokens[tokennum]
      nexttokenpos = self.source.find(originaltoken, tokenpos)
      sourceparts.append(self.source[tokenpos:nexttokenpos])
      sourceparts.append(self.tokens[tokennum])
      tokenpos = nexttokenpos + len(originaltoken)
      if tokennum in self.insertions:
        for index, tokenrange in self.insertions[tokennum]:
          foreignstart, foreignend = tokenrange
          foreignsource = index.getsource(foreignstart, foreignend)
          sourceparts.append(foreignsource)
    if end == len(self.tokens):
      sourceparts.append(self.source[tokenpos:end])
    return "".join(sourceparts)

  def getfieldvalue(self, sectionname, fieldname):
    section = self.definitions[sectionname]
    return section[fieldname]

  def getfieldtokennum(self, sectionname, fieldname):
    section = self.definitions[sectionname]
    return section['tokennums'][fieldname] + section['tokennums']['start']

  def getsectionendtokennum(self, sectionname):
    section = self.definitions[sectionname]
    return section['tokennums']['end'] + section['tokennums']['start']

  def setfieldvalue(self, sectionname, fieldname, fieldvalue):
    fieldtokennum = self.getfieldtokennum(sectionname, fieldname)
    self.tokens[fieldtokennum] = fieldvalue

  def getsectiontokenrange(self, sectionname):
    section = self.definitions[sectionname]
    start, end = section['tokennums']['start'], section['tokennums']['end']+1
    while self.tokens[start+end] == '\n':
      end += 1
    return (start, start+end)

  def merge(self, otherindexes):
    """merges this with another index... hmmm ...."""
    indexes = [self] + otherindexes
    languages = [index.getfieldvalue('gid_Installation', 'Languages') for index in indexes]
    languages = [sparse.stringeval(languagevalues).split(",") for languagevalues in languages]
    languages = reduce(operator.add, languages)
    languages.sort()
    languages = ",".join(languages)
    self.setfieldvalue('gid_Installation', 'Languages', '"%s"' % languages)
    # can't do anything about HelpText yet...
    directoriestorename = {}
    for index in indexes:
      index.directorychildren = {}
      index.directoryfiles = {}
      for directory in index.bytype["Directory"]:
        if directory.find('_Language') != -1 or directory.find("_Isolanguage") != -1:
          directoriestorename[directory] = 1
        parentid = index.getfieldvalue(directory, 'ParentID')
        if parentid not in index.directorychildren:
          index.directorychildren[parentid] = [directory]
        else:
          index.directorychildren[parentid].append(directory)
      # make an index of which files go in which directory
      for fileentry in index.bytype["File"]:
        directory = index.getfieldvalue(fileentry, 'Dir')
        if directory not in index.directoryfiles:
          index.directoryfiles[directory] = [fileentry]
        else:
          index.directoryfiles[directory].append(fileentry)
    for index in indexes:
      for directory in directoriestorename:
        suffix = "_" + sparse.stringeval(index.getfieldvalue(directory, "HostName"))
        if directory.find('_Language') != -1:
          newname = directory.replace("_Language", suffix)
        elif directory.find('_Isolanguage') != -1:
          newname = directory.replace("_Isolanguage", suffix)
        else: newname = directory + "_" + suffix
        index.renamedirectory(directory, newname, suffix)
        if index != self:
          if directory in index.directoryfiles:
            for fileentry in index.directoryfiles[directory]:
              tokenrange = index.getsectiontokenrange(fileentry)
              fileentrysection = index.definitions[fileentry]
              # the file will already have been renamed by the index.renamedirectory
              self.insertforeignsection(fileentry, fileentry + suffix, fileentrysection, index, tokenrange)
    # TODO: handle changing the module list of items...

  def renamedirectory(self, directory, newname, suffix):
    self.rename(directory, newname)
    if directory in self.directorychildren:
      for child in self.directorychildren[directory]:
        self.renamedirectory(child, child + suffix, suffix)
    if directory in self.directoryfiles:
      for fileentry in self.directoryfiles[directory]:
        self.rename(fileentry, fileentry + suffix)
        # TODO: actually move the packed files...
        packedname = sparse.stringeval(self.getfieldvalue(fileentry, "PackedName"))
        self.setfieldvalue(fileentry, "PackedName", '"%s"' % (packedname+suffix))

  def copyfiles(self, srcdirectory, destdirectory, onlychanged=0):
    for fileentry in self.bytype['File']:
     try:
      fileentrysection = self.definitions[fileentry]
      if 'PackedName' not in fileentrysection: continue
      packedtokennum = self.getfieldtokennum(fileentry, "PackedName")
      # FIXME: shouldn't have this problem
      if self.tokens[packedtokennum] == '=': packedtokennum += 1
      originalpackedname = sparse.stringeval(self.originaltokens[packedtokennum])
      packedname = sparse.stringeval(self.tokens[packedtokennum])
      if not onlychanged or packedname != originalpackedname:
        srcfile = os.path.join(srcdirectory, originalpackedname)
        destfile = os.path.join(destdirectory, packedname)
        print 'cp -p %s %s' % (srcfile, destfile)
        os.system('cp -p %s %s' % (srcfile, destfile))
     except Exception, e:
      print "error in %r %r" % (self.filename, fileentry)
      print e
      continue

if __name__ == '__main__':
  import sys
  try:
    import psyco
    psyco.full()
  except:
    pass
  setupfiles = {}
  mainsetupfile = SetupIndex(sys.argv[1])
  othersetupfiles = []
  for arg in sys.argv[2:-1]:
    othersetupfiles.append(SetupIndex(arg))
  mainsetupfile.merge(othersetupfiles)
  open(sys.argv[-1], 'w').write(mainsetupfile.getsource())
  mainsetupfile.copyfiles(os.path.dirname(sys.argv[1]), os.path.dirname(sys.argv[-1]))
  for othersetupfile in othersetupfiles:
    othersetupfile.copyfiles(os.path.dirname(othersetupfile.filename), os.path.dirname(sys.argv[-1]), 1)

