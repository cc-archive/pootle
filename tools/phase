#!/bin/bash
#
# Copyright 2005 Zuza Software Foundation
#
# This file is part of The Translate Toolkit.
#
# The Translate Toolkit is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# translate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with translate; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


# phase - is a set of commands that allows you to break up a translation package 
# and create phases to send to translators.  It will manage the return, checking and
# integration of changes.  Ultimately this should convert to Python so that
# other people on less well known platforms like Windows can use them.


# Commands error handling

function error_notacommand {
	echo "$1 is not a valid command"
	usage
}

function usagecommands {
	cat <<EOF
Commands:
	listfiles <phase-list> <phase-name> -- list all files for the given phase in the phase-list file
	countpo <language-dir> <phase-list> <phase-name> -- counts PO file in the given phase
	countpot <template-dir> <phase-list> <phase-name> -- counts POT file in the given phase
	missingpo <language-dir> <phase-list> <phase-name> -- lists files that have not been returned for a phase
	packpot <template-dir> <phase-list> <phase-name> -- packs all POT files for a given phase into a ZIP file
	packall <template-dir> <phase-list> -- packs all phases found in the phase list
	countmismatch <language-dir> <template-dir> <phase-list> <phase-name> -- compares the source word count between PO and POT to determine if there are any file errors.
	editpo <language-dir> <phase-list> <phase-name> -- edit the PO files in a phase
	editpochecks <language> <phase-name> -- edit the PO checks output by checkpo
	checkpo <language-dir> <phase-list> <phase-name> [pofilter options] -- run pofilter checks against the given phase
	mergepo <language> <phase-name> -- merge the checks back into the main language directory
	diffpo <language-dir> <phase-list> <phase-name> -- perform a cvs diff for the phase
	reviewpo <language-dir> <phase-list> <phase-name> [pofilter options] -- extract items marked for review for the given phase
	editreviews <language-dir> <phase-list> <phase-name> -- edit the extracted revie items
	countreviews <language-dir> <phase-list> <phase-name> -- count the number of strings and words under review
	packreviews <language> <phase-name> -- create a ZIP file with the reviews
	checkinpo <language-dir> <phase-list> <phase-name> -- cvs checkin the files in the given phase
	creategsi <language-dir> <en-US.gsi> <traget-language> -- creates a BZ2 GSI/SDF file for the language against the en-US GSI file
        reviewsinout <language> <phase-name> -- counts the number of review files returned vs sent and shows which are missing 
	reviewsdiff <language> <phase-name> -- create a diff between what was sent for review and what was returned
EOF
	#emailpot <template-dir> <phase-list> <phase-name> <emails> -- emails the POT files with wordcount to the addresses
	#emailpo <language-dir> <phase-list> <phase-name> <emails> -- emails the PO files with wordcount to the addresses
	#emailreview <language> <phase-name> <emails> -- emails the prepared review files to the addresses
}

function usage() {
	programname=`basename $0`
    	echo "Usage: $programname <command> options"
	usagecommands
	exit 1
}

# Operation

function report {
	if [ "$*" == "DONE" ]; then
		echo " done."
	else
		echo -n "$* "
	fi
}

function getphasefiles {
	# Returns a list of files that are valid for this phase
	filelist=$1
    phase=$2
	egrep --count "^$phase\b" $filelist > /dev/null
	if [ $? -ne 0 ]; then
		echo "No such phase exists"
		exit 1
	fi
	egrep "^$phase\b" $filelist | cut -f 2 | sort
}

function getphases {
	# Retuns a list of all the defines phases
	filelist=$1
	cut -f1 $filelist | sort | uniq
}

function countpo {
	# Counts PO files
	directory=$1
	filelist=$2
	phase=$3
	files=$(getphasefiles $filelist $phase)
	cd $directory
	pocount $files
}

function countreviews {
	# Counts PO files for review
	language=$1
	filelist=$2
	phase=$3
	pocount $(find $language-$phase-review -name "*.po")
}

function countpot {
	# Counts POT files
	directory=$1
	filelist=$2
	phase=$3
	files=$(getphasefiles $filelist $phase | sed "s/\.po$/\.pot/")
	cd $directory
	pocount $files
}

function missingpo {
	# Reports PO files that are missing from the filelist
	directory=$1
	filelist=$2
	phase=$3
	files=$(getphasefiles $filelist $phase)
	cd $directory
	for file in $files
	do
		if [ ! -f $file ]; then
			echo $file
			missingfiles=$( echo $missingfiles $file)
		fi
	done
}

function copy_po_to_temp_dir {
	basedir=$1
	tempdir=$2
	shift 2
	files=$*
	for file in $files
	do
		fromdir=$(dirname $file)	
		mkdir -p $tempdir/$fromdir
		cp -p $basedir/$file $tempdir/$fromdir
	done
}

function packpot {
	# Packs POT files that match the file list
	directory=$1
	filelist=$2
	phase=$3
    tempdir=phase$phase-templates
	files=$(getphasefiles $filelist $phase | sed "s/\.po$/\.pot/")
		report "Packpot: creating"
	copy_po_to_temp_dir $directory $tempdir $files
		report ": wordcount"
	pocount $(find $tempdir -name "*.pot") > $tempdir/wordcount.txt
		report ', PO'
	for potfile in $(find $tempdir -name "*.pot")
	do
		pofile=$(echo $potfile | sed "s/\.pot$/\.po/")
		msginit --no-translator --locale=af_ZA -i $potfile -o $pofile > /dev/null 2>&1
	done
		report ", CSV"
	po2csv --progress=none $tempdir $tempdir
		report ", tarball"
	tar czf $tempdir.tar.gz $tempdir
		report ", zip"
	zip -qr9 $tempdir.zip $tempdir
		report DONE
}	

function packreviews {
	language=$1
	phase=$2
	review_dir=$language-$phase-review
	pocount $(find $review_dir -name "*.po") > $review_dir/wordcount.txt
	zip -qr9 $review_dir.zip $review_dir
}

function packall {
	# Pack all phases in a project
		report "Packing all phases:"
	for phase in $(getphases $2)
	do
			report $phase
		packpot $1 $2 $phase
	done
		report DONE
}

function count_source_words {
	file=$1
	pocount --csv $file | tail -1 | cut -d"," -f10
}

function countmismatch {
	# Checks that the source wordcount matches in each returned file in a phase
	language=$1
	templates=$2
	filelist=$3
	phase=$4
	files=$(getphasefiles $filelist $phase)
	for file in $files
	do
		if [ -f $language/$file ]; then
			powords=$(count_source_words $language/$file)
		else
			powords=0
		fi
		potfile=$templates/$(echo $file | sed "s/\.po$/.pot/")
		if [ -f $potfile ]; then
			potwords=$(count_source_words $potfile)
		else
			potwords=0
		fi
		if [ $powords -ne $potwords ]; then
			echo "Mismatch: $file - expected $potwords got $powords"
		fi
	done
}

function editpo {
	# Edit the PO files for this phase
	language=$1
	filelist=$2
	phase=$3
	editor="vim"
	files=$(getphasefiles $filelist $phase)
	(cd $language; exec $editor $files)
}

function editreviews {
	# Edit the PO files for this phase
	language=$1
	filelist=$2
	phase=$3
	editor="vim"
	files=$(getphasefiles $filelist $phase)
	(cd $language-$phase-review; exec $editor $files)
}

function editpochecks {
	language=$1
	phase=$2
	editor="vim"
	if [ -d $language-$phase-check ]; then
		exec $editor $(find $language-$phase-check -name "*.po" | sort)
	else
		echo "No checks present for language $language phase $phase."
		echo "Run checkpo to create them"
		exit 1
	fi
}

function checkpo {
	# Uses pofilter to check a language
	language=$1
	filelist=$2
	phase=$3
	shift 3
	otheroptions=$*
	files=$(getphasefiles $filelist $phase)
	tempdir=`mktemp -d`
	copy_po_to_temp_dir $language $tempdir $files
	pofilter $otheroptions $tempdir $language-$phase-check
        rm -rf $tempdir
}

function mergepo {
	language=$1
	phase=$2
	pomerge -t $language -o $language -i $language-$phase-check
}

function diffpo {
	language=$1
	filelist=$2
	phase=$3
	files=$(getphasefiles $filelist $phase)
    for file in $files
	do
		if [ -f $language/$file ]; then
			present_file=$(echo $present_file $file)
		else
			echo "Skipping - $file - file not found"
		fi	
	done
	(cd $language; cvs diff -u $present_files)
}

function reviewpo {
	# Uses pofilter to extract the review items for a language
	language=$1
	filelist=$2
	phase=$3
	shift 3
	otheroptions=$*
	files=$(getphasefiles $filelist $phase)
	tempdir=`mktemp -d`
	copy_po_to_temp_dir $language $tempdir $files
	pofilter -t isreview $otheroptions $tempdir $language-$phase-review
	# Transform "#, review" to # REVIEW
	sed -i "/#, review/s/#, review/# REVIEW/" $(find $language-$phase-review -name "*.po")
        rm -rf tempdir
}

function checkinpo {
	# Check the files into CVS but only those in the phase
	language=$1
	filelist=$2
	phase=$3
	files=$(getphasefiles $filelist $phase)
	# remove files that are missing
	for file in $files
	do
		if [ -f $language/$file ]; then
			exists="$exists $file"
		else
			echo "$file - missing ignoring"
		fi
	done
	files=$exists
	(cd $language; cvs ci $files)
}

function creategsi {
	# Creates a GSI file for the given language
	language=$1
	enusgsi=$2
	if [ "$3" == "" ]; then
		targetgsilanguage=$language
	else
		targetgsilanguage=$3
	fi
	po2oo -l $targetgsilanguage -t $enusgsi $language GSI_$language.sdf && rm -f GSI_$language.sdf.bz2 && bzip2 GSI_$language.sdf
}

function reviewsinout {
	# Checks which files have not been returned from a review
	language=$1
	phase=$2
	reviewdir=$language-$phase-review
	returndir=$language-$phase-review-returned
	reviewlist=`mktemp`
	returnlist=`mktemp`
	(cd $reviewdir; find . -type f -name "*.po" | sort ) > $reviewlist
	(cd $returndir; find . -type f -name "*.po" | sort ) > $returnlist
	echo "Reviews out: `cat $reviewlist | wc -l`"
	echo "Reviews returned: `cat $returnlist | wc -l`"
	diff -u $reviewlist $returnlist
	rm $reviewlist $returnlist
}

function reviewsdiff {
	# Creates a diff between what was sent for review and what was returned
	language=$1
	phase=$2
	diff -ur $language-$phase-review $language-$phase-review-returned
}

command=$1
shift
case $command in
        -h|--help) usagecommands
		;;
	listfiles) getphasefiles $1 $2
		;;
	countpo) countpo $1 $2 $3
		;;
	countpot) countpot $1 $2 $3
		;;
	missingpo) missingpo $1 $2 $3
		;;
	packpot) packpot $1 $2 $3
		;;
	packall) packall $1 $2
		;;
	countmismatch) countmismatch $1 $2 $3 $4
		;;
	editpo) editpo $1 $2 $3
		;;
	editpochecks) editpochecks $1 $2
		;;
	checkpo) checkpo $*
		;;
	mergepo) mergepo $1 $2
		;;
	diffpo) diffpo $1 $2 $3
		;;
	reviewpo) reviewpo $*
		;;
	editreviews) editreviews $1 $2 $3
		;;
	countreviews) countreviews $1 $2 $3
		;;
	packreviews) packreviews $1 $2
		;;
	checkinpo) checkinpo $1 $2 $3
		;;
	creategsi) creategsi $1 $2 $3
		;;
        reviewsinout) reviewsinout $1 $2
		;;
	reviewsdiff) reviewsdiff $1 $2
		;;
	*) error_notacommand
		;;
esac


