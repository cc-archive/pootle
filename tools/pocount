#!/usr/bin/python

"""takes a .po translation file and produces word counts and other statistics"""

import sys
import os
from translate.storage import po

def sum(parts):
  return reduce(int.__add__, parts, 0)

def untranslatedwords(pair):
  original, translation = pair
  if translation.words != 0: return 0
  return original.words

def wordcount(postr):
  return len(po.getunquotedstr(postr).split())

def summarize(elements):
  # ignore totally blank or header elements
  elements = filter(lambda poel: not (poel.isblank() or poel.isheader()), elements)
  print "strings:", len(elements)
  untranslated = filter(lambda poel: not (po.getunquotedstr(poel.msgstr).strip()), elements)
  print "untranslated strings:", len(untranslated)
  print "untranslated words:", sum(map(lambda poel: wordcount(poel.msgstr), untranslated))
  fuzzy = filter(lambda poel: poel.isfuzzy(), elements)
  print "fuzzy strings:", len(fuzzy)
  print "fuzzy words (original):", sum(map(lambda poel: wordcount(poel.msgid), fuzzy))
  print "words (original):", sum([wordcount(poel.msgid) for poel in elements])
  print "words (translation):", sum([wordcount(poel.msgstr) for poel in elements])

class summarizer:
  def __init__(self, filenames):
    self.allelements = []
    for filename in filenames:
      if not os.path.exists(filename):
        print >>sys.stderr, "cannot process %s: does not exist" % filename
        continue
      elif os.path.isdir(filename):
        self.handledir(filename)
      else:
        self.handlefile(filename)
    print "TOTAL:"
    summarize(self.allelements)
    print

  def handlefile(self, filename):
    infile = open(filename)
    pof = po.pofile()
    pof.fromlines(infile.readlines())
    infile.close()
    self.allelements.extend(pof.poelements)
    print filename
    summarize(pof.poelements)
    print

  def handlefiles(self, arg, dirname, filenames):
    for filename in filenames:
      pathname = os.path.join(dirname, filename)
      if not os.path.isdir(pathname):
        self.handlefile(pathname)

  def handledir(self, dirname):
    os.path.walk(dirname, self.handlefiles, None)

if __name__ == '__main__':
  # TODO: make this handle command line options using optparse...
  summarizer(sys.argv[1:])

