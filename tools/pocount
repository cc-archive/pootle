#!/usr/bin/python

"""takes a .po translation file and produces word counts and other statistics"""

import sys
import os
from translate.storage import po

class count:
  def __init__(self, message):
    self.chars = len(message)
    self.words = len(message.strip().split())
  def __repr__(self):
    return "%d chars, %d words" % (self.chars, self.words)

def processfile(infile):
  pof = po.pofile()
  pof.fromlines(infile.readlines())
  originals, translations = [], []
  for poe in pof.poelements:
    if poe.isheader() or poe.isblank():
      continue
    msgid = po.getunquotedstr(poe.msgid)
    if isinstance(poe.msgstr, dict):
      msgstr = po.getunquotedstr(poe.msgstr[0])
    else:
      msgstr = po.getunquotedstr(poe.msgstr)
    original = count(msgid)
    translation = count(msgstr)
    originals.append(original)
    translations.append(translation)
  return originals, translations

def sum(parts):
  return reduce(int.__add__, parts, 0)

def istranslated(translation):
  return translation.chars == 0

def untranslatedwords(pair):
  original, translation = pair
  if translation.words != 0: return 0
  return original.words

def summarize(originals, translations):
  print "strings:", len(originals)
  print "untranslated strings:", len(filter(istranslated, translations))
  print "untranslated words:", sum(map(untranslatedwords, zip(originals, translations)))
  print "words (original):", sum([original.words for original in originals])
  print "words (translation):", sum([translation.words for translation in translations])

class summarizer:
  def __init__(self, filenames):
    self.alloriginals, self.alltranslations = [], []
    for filename in filenames:
      if not os.path.exists(filename):
        print >>sys.stderr, "cannot process %s: does not exist" % filename
        continue
      elif os.path.isdir(filename):
        self.handledir(filename)
      else:
        self.handlefile(filename)
    print "TOTAL:"
    summarize(self.alloriginals, self.alltranslations)
    print

  def handlefile(self, filename):
    infile = open(filename)
    originals, translations = processfile(infile)
    self.alloriginals.extend(originals)
    self.alltranslations.extend(translations)
    infile.close()
    print filename
    summarize(originals, translations)
    print

  def handlefiles(self, arg, dirname, filenames):
    for filename in filenames:
      pathname = os.path.join(dirname, filename)
      if not os.path.isdir(pathname):
        self.handlefile(pathname)

  def handledir(self, dirname):
    os.path.walk(dirname, self.handlefiles, None)

if __name__ == '__main__':
  # TODO: make this handle command line options using optparse...
  summarizer(sys.argv[1:])

