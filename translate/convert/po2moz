#!/usr/bin/env python
# 
# Copyright 2002, 2003 Zuza Software Foundation
# 
# This file is part of translate.
#
# translate is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# translate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with translate; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""script that converts a set of .po files to a set of .dtd and .properties files
either done using a template or just using the .po file"""

import sys
import os
from translate.convert import po2dtd
from translate.convert import po2prop
from translate.storage import dtd
from translate.storage import po
from translate.misc import quote
from translate import __version__

def convertdtd(inputfile, outputfile, templatefile):
  inputpo = po.pofile(inputfile)
  if templatefile is None:
    convertor = po2dtd.po2dtd()
  else:
    templatedtd = dtd.dtdfile(templatefile)
    convertor = po2dtd.redtd(templatedtd)
  outputdtd = convertor.convertfile(inputpo)
  outputdtdlines = outputdtd.tolines()
  outputfile.writelines(outputdtdlines)
  return 1

def convertprop(inputfile, outputfile, templatefile):
  inputpo = po.pofile(inputfile)
  if templatefile is None:
    raise ValueError("must have template file for properties files")
    # convertor = po2prop.po2prop()
  else:
    convertor = po2prop.reprop(templatefile)
  outputproplines = convertor.convertfile(inputpo)
  outputfile.writelines(outputproplines)
  return 1

if __name__ == '__main__':
  # handle command line options
  from translate.convert import convert
  inputformat = "po"
  outputformats = {"dtd": convertdtd, "properties": convertprop}
  parser = convert.ConvertOptionParser(convert.defaultrecursion, inputformat, outputformats, usetemplates=True)
  (options, args) = parser.parse_args()
  # recurse the appropriate directories...
  try:
    parser.runconversion(options, None)
  except convert.optparse.OptParseError, message:
    parser.error(message)

