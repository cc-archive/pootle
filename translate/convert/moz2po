#!/usr/bin/env python
# 
# Copyright 2002, 2003 Zuza Software Foundation
# 
# This file is part of translate.
#
# translate is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# translate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with translate; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""script that converts a set of .dtd and .properties files to a set of .po files"""

import sys
import os
from translate.convert import dtd2po
from translate.convert import prop2po
from translate.storage import dtd
from translate.storage import properties
from translate.storage import po
from translate.misc import quote
from translate import __version__

def convertdtd(inputfile, outputfile, templatefile):
  """reads in inputfile and templatefile using dtd, converts using dtd2po, writes to outputfile"""
  inputdtd = dtd.dtdfile(inputfile)
  convertor = dtd2po.dtd2po()
  if templatefile is None:
    outputpo = convertor.convertfile(inputdtd)
  else:
    templatedtd = dtd.dtdfile(templatefile)
    outputpo = convertor.mergefiles(templatedtd, inputdtd)
  if outputpo.isempty():
    return 0
  outputpolines = outputpo.tolines()
  outputfile.writelines(outputpolines)
  return 1

def convertprop(inputfile, outputfile, templatefile):
  """reads in inputfile using properties, converts using prop2po, writes to outputfile"""
  inputprop = properties.propfile(inputfile)
  convertor = prop2po.prop2po()
  if templatefile is None:
    outputpo = convertor.convertfile(inputprop)
  else:
    templateprop = properties.propfile(templatefile)
    outputpo = convertor.mergefiles(templateprop, inputprop)
  if outputpo.isempty():
    return 0
  outputpolines = outputpo.tolines()
  outputfile.writelines(outputpolines)
  return 1

def recurse(inputdir, outputdir, templatedir, inputformats, outputformat):
  """convert files in input/template dirs to files in outputformat in outputdir using inputformats"""
  dirstack = ['']
  # discreated contains all the directories created, mapped to whether they've been used or not...
  dirscreated = {}
  while dirstack:
    top = dirstack.pop(-1)
    names = os.listdir(os.path.join(inputdir, top))
    dirs = []
    for name in names:
      inputname = os.path.join(inputdir, top, name)
      # handle directories...
      if os.path.isdir(inputname):
        dirs.append(os.path.join(top, name))
        outputname = os.path.join(outputdir, top, name)
        if not os.path.isdir(outputname):
          os.mkdir(outputname)
          dirscreated[dirs[-1]] = 0
          if top in dirscreated:
            dirscreated[top] = 1
        if templatedir is not None:
          templatename = os.path.join(templatedir, top, name)
          if not os.path.isdir(templatename):
            print >>sys.stderr, "warning: missing template directory %s" % templatename
      elif os.path.isfile(inputname):
        base, inputext = os.path.splitext(name)
        inputext = inputext.replace(os.extsep, "", 1)
        if not inputext in inputformats:
          # only handle names that match recognized input file extensions
          continue
        # now we have split off .po, we split off the original extension
        outputname = os.path.join(outputdir, top, name + os.extsep + outputformat)
        inputfile = open(inputname, 'r')
        outputfile = open(outputname, 'w')
        templatefile = None
        if templatedir is not None:
          templatename = os.path.join(templatedir, top, name)
          if os.path.isfile(templatename):
            templatefile = open(templatename, 'r')
          else:
            print >>sys.stderr, "warning: missing template file %s" % templatename
        convertfile = inputformats[inputext]
        if convertfile(inputfile, outputfile, templatefile):
          if top in dirscreated:
            dirscreated[top] = 1
        else:
          outputfile.close()
          os.unlink(outputname)
    # make sure the directories are processed next time round...
    dirs.reverse()
    dirstack.extend(dirs)
  # remove any directories we created unneccessarily
  # note that if there is a tree of empty directories, only leaves will be removed...
  for createddir, used in dirscreated.iteritems():
    if not used:
      os.rmdir(os.path.join(outputdir, createddir))

def handleoptions(options, inputformats, outputformat):
  """handles the options, and runs the neccessary functions..."""
  if options.inputdir is None:
    raise optparse.OptionValueError("cannot use stdin for recursive run. please specify inputdir")
  if not os.path.isdir(options.inputdir):
    raise optparse.OptionValueError("inputdir must be directory for recursive run.")
  if options.outputdir is None:
    raise optparse.OptionValueError("must specify output directory for recursive run.")
  if not os.path.isdir(options.outputdir):
    raise optparse.OptionValueError("output must be existing directory for recursive run.")
  if options.templatedir is not None:
    if not os.path.isdir(options.templatedir):
      raise optparse.OptionValueError("template must be existing directory for recursive run.")
  if options.pot:
    outputformat = "pot"
  recurse(options.inputdir, options.outputdir, options.templatedir, inputformats, outputformat)

if __name__ == '__main__':
  # handle command line options
  try:
    import optparse
  except ImportError:
    from translate.misc import optparse
  # TODO: add ability to import translations from another directory
  inputformats = {"dtd": convertdtd, "properties": convertprop}
  outputformat = "po"
  parser = optparse.OptionParser(usage="%prog [-P|--pot] [-i|--input-dir inputdir] [-o|--output-dir outputdir] [-t|--template-dir templatedir]",
                                 version="%prog "+__version__.ver)
  parser.add_option("-i", "--input-dir", dest="inputdir", default=None,
                    help="read from inputdir in "+", ".join(inputformats)+" formats", metavar="inputdir")
  parser.add_option("-o", "--output-dir", dest="outputdir", default=None,
                    help="write to outputdir in "+outputformat+" format", metavar="outputdir")
  parser.add_option("-t", "--template", dest="templatedir", default=None,
                    help="read from templatedir in "+". ".join(inputformats)+" formats", metavar="templatedir")
  parser.add_option("-P", "--pot", action="store_true", dest="pot", default=False, \
                    help="produce PO template (.pot) with blank msgstrs")
  (options, args) = parser.parse_args()
  # recurse the appropriate directories...
  try:
    handleoptions(options, inputformats, outputformat)
  except optparse.OptParseError, message:
    parser.error(message)

