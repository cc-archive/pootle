#!/usr/bin/env python
#
# Copyright 2002-2004 Zuza Software Foundation
# 
# This file is part of translate.
#
# translate is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# translate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with translate; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

"""script to translate a set of plain text message files using gettext .po localization
You can generate the po files using txt2po"""

from translate.storage import po
from translate.misc import quote
from translate.convert import convert
import os

class po2txt:
  """po2txt can take a po file and generate txt. best to give it a template file otherwise will just concat msgstrs"""
  def convertfile(self, inputpo):
    """converts a file to .po format"""
    txtresult = ""
    for thepo in inputpo.poelements:
      if thepo.isheader():
        continue
      txtresult += po.getunquotedstr(thepo.msgstr, includeescapes=False) + "\n" + "\n"
    return txtresult
 
  def mergefile(self, inputpo, templatetext):
    """converts a file to .po format"""
    txtresult = templatetext
    # TODO: make a list of blocks of text and translate them individually
    # rather than using replace
    for thepo in inputpo.poelements:
      if thepo.isheader():
        continue
      msgid = po.getunquotedstr(thepo.msgid, includeescapes=False)
      msgstr = po.getunquotedstr(thepo.msgstr, includeescapes=False)
      txtresult = txtresult.replace(msgid, msgstr)
    return txtresult

def converttxt(inputfile, outputfile, templatefile):
  """reads in stdin using fromfileclass, converts using convertorclass, writes to stdout"""
  inputpo = po.pofile(inputfile)
  convertor = po2txt()
  if templatefile is None:
    outputtxt = convertor.convertfile(inputpo)
  else:
    templatetext = templatefile.read()
    outputtxt = convertor.mergefile(inputpo, templatetext)
  outputfilepos = outputfile.tell()
  outputfile.write(outputtxt)
  return 1

if __name__ == '__main__':
  # handle command line options
  formats = {("po", "txt"):("txt",converttxt), ("po"):("txt",converttxt)}
  parser = convert.ConvertOptionParser(formats, usetemplates=True, description=__doc__)
  parser.run()

