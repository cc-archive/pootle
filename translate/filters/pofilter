#!/usr/bin/env python
# 
# Copyright 2002, 2003 Zuza Software Foundation
# 
# This file is part of translate.
#
# translate is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# translate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with translate; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""simple script to run all check filters on gettext .po localization file(s)"""

from translate.storage import po
from translate.filters import checks

class pocheckfilter:
  def __init__(self, checker=None):
    """builds a pocheckfilter using the given checker"""
    if checker is None:
      self.checker = checks.StandardChecker()
    else:
      self.checker = checker

  def filterelement(self, thepo, includereview=1):
    """runs filters on an element"""
    if thepo.isheader(): return []
    unquotedid = po.getunquotedstr(thepo.msgid)
    unquotedstr = po.getunquotedstr(thepo.msgstr)
    if thepo.isfuzzy():
      return []
    failures = self.checker.run_filters(unquotedid, unquotedstr)
    if includereview and not failures and thepo.hastypecomment("review"):
      failures.append("marked for review")
    return failures

  def filterfile(self, thepofile, includereview=1):
    """runs filters on a file"""
    thenewpofile = po.pofile()
    for thepo in thepofile.poelements:
      failures = self.filterelement(thepo, includereview)
      if failures:
        thepo.visiblecomments.extend(["#_ %s\n" % failure for failure in failures])
        if ("".join(thepo.typecomments)).find("fuzzy") == -1:
          thepo.typecomments.append("#, fuzzy\n")
        thenewpofile.poelements.append(thepo)
    return thenewpofile

def runpofilter(inputfile, outputfile, includereview=1, filterobject=None):
  """reads in inputfile using po.pofile, filters using pocheckfilter, writes to stdout"""
  fromfile = po.pofile(inputfile)
  checkfilter = pocheckfilter(filterobject)
  tofile = checkfilter.filterfile(fromfile, includereview)
  if tofile.isempty():
    return 0
  tolines = tofile.tolines()
  outputfile.writelines(tolines)
  return 1

if __name__ == '__main__':
  from translate.filters import filtercmd
  inputformats = {"po":runpofilter, "pot":runpofilter}
  parser = filtercmd.FilterOptionParser(filtercmd.optionalrecursion, inputformats)
  parser.add_option("", "--review", dest="includereview", default=False, action="store_true",
    help="include elements marked for review...")
  parser.add_option("", "--ignorereview", dest="includereview", default=False, action="store_false",
    help="don't include elements marked for review...")
  parser.add_option("", "--openoffice", dest="filterobject", default=None, action="store_const",
    const=checks.OpenOfficeChecker())
  parser.add_option("", "--mozilla", dest="filterobject", default=None, action="store_const",
    const=checks.MozillaChecker())
  requiredoptions = {'includereview':True, 'filterobject':True}
  options, args = parser.parse_args()
  # TODO: move this code into filtercmd...
  if options.input is None:
    if len(args) == 0:
      parser.runfilter(options, runpofilter, requiredoptions)
    else:
      for inputarg in args:
        options.input = inputarg
        parser.runfilter(options, runpofilter, requiredoptions)
  else:
    if len(args) != 0:
      parser.error("incorrect number of arguments")
    parser.runfilter(options, runpofilter, requiredoptions)

