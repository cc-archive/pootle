#!/bin/bash

function split() {
	# Divided input data into words based on the regex supplied
	# eg: "[[:space:]]" to split on whitespace
	sed "s/$1/\\n/g"
}

function spliti() {
	# Divided input data into words based on the regex supplied, ignore capitilisation
	# eg: "[[:space:]]" to split on whitespace
	sed "s/$1/\\n/gi"
}

function remove() {
	# Discards lines that conform to the regex
	# eg: ".*@.*" a simplistic removal of email addresses
	# eg: "http://" remove all web URLs
	egrep -v "$1"
}

function trim() {
	# Remove characters that conform to the regex
	# eg: "[[:space:]]*$" remove trailing whitespace
	sed "s/$1//g"
}

# Split - some standard splitters
function split_on_space() {
	split "[[:space:]]"
}

function split_on_punctuation() {
	split "[,:()|.+]"
}


# Remove - some standard data eliminators
function remove_email_addresses() {
	remove ".*@.*"
}

function remove_words_starting_with_numbers() {
	remove "^[0-9]+"
}

function remove_punctuation_only_words() {
	remove "^[[:digit:][:punct:][:space:]x]*$"
}

function remove_urls() {
	remove "(http|https|ftp|gopher|file|mailto)://"
}

function remove_graphic_filenames() {
	remove "\.(gif|jpg|png|mng)"
}

# Trim - some standard character trimmers
function trim_leading_whitespace() {
	trim "^[[:space:]]*"
}

function trim_trailing_whitespace() {
	trim "[[:space:]]*$"
}

function trim_whitespace() {
	trim_leading_whitespace | trim_trailing_whitespace
}

function trim_trailing_punc() {
	trim "[[:punct:]]*$"
}

function trim_leading_punc() {
	trim "^[[:punct:]]*"
}

function trim_punc() {
	trim_trailing_punc | trim_leading_punc
}

function sort_uniq_list() {
	sort --ignore-case | uniq --count --ignore-case | sort --general-numeric-sort --reverse
}

function sort_uniq_and_add() {
	sort --key 2 | ./sum.py | sort --general-numeric-sort --reverse
}

function extract_words() {
# Two arguments 1) file 2) filetype
_file=$1
_filetype=$2


case ${_filetype} in
	pdf)	pdftotext ${_file} - | 
		split_on_space |
		trim_whitespace | 
		remove_email_addresses |
		split_on_punctuation | 
		remove_punctuation_only_words |
		remove_words_starting_with_numbers |
		trim_punc | 
		sort_uniq_list;;
	html|htm|php) lynx -dump -nolist ${_file} | 
		split_on_space |
		remove_punctuation_only_words |
		remove_urls | 
		remove_email_addresses |
		trim_punc | 
		remove_graphic_filenames | 
		sort_uniq_list;;
	po|mo)
		if [ ${_filetype} == "mo" ]; then
			tmp=`mktemp`
			msgunfmt ${_file} > $tmp
			_file=$tmp
		fi
		# Ensure all strings a terminated with \n
		msgexec -i ${_file} sed "s/$/\\n/g" | 
		# Split on <a> tags before we split on spaces
		spliti "<\/\{0,1\}a[^>]*>" |
		# Split on HTML markers
		spliti "<\/\{0,1\}\(b\|p\|li\|em\|h1\|h2\|h3\|br\|qt\|i\|strong\|ul\|u\|bold\|font\|sub\|head\|title\|a\|html\|large\|center\|tt\|table\|tr\|td\|th\|big\|code\|hr\|HR\|pre\|qml\|body\)[^>]*\/\{0,1\}>" |
		split_on_space |
		trim_whitespace | 
		# Split word->word->word entries
		split "->" |
		# Clean KDE specifics
		trim "^\(Name\|Keywords\|Description\|Comment\|GenericName\|About\|Language\)=" |
		# Remove all http:// references before we split on : (colon)
		remove_urls |
		remove_email_addresses |
		split_on_punctuation | 
		split "[\][n]" |
		# Split / seperated word - after HTML becaise of </a> markers
		split "\/" |
		# Remove all HTML escaped chars eg &amp; then split ; seperated words
		remove "&[^;]*;" | split ";" | 
		remove_punctuation_only_words |
		remove_words_starting_with_numbers |
		# Remove all --xxx and -X options
		trim "^-+" |
		# Remove all variables after we've split everything so we'll remove "About-%s" 
		# but not "About %s" which would be split
		remove "[%$]" | 
		trim_punc | 
		# Squash accelerator key indicators (_|&)
		trim "[_&~]" |
		sort_uniq_list
		rm -f $tmp
		;;
	dat)
		cat ${_file} |
		remove "^THE_URL" |
		trim "^THE_TITLE:" |
		trim_whitespace | 
		split_on_space |
		remove "^[[:space:]]*$" |
		remove_graphic_filenames | 
		remove_email_addresses | 
		remove_punctuation_only_words |
		trim_punc |
		sort_uniq_list
		;;
	*)
		echo "Error: $filetype is not a supported file type"
		exit 1;;
esac
}

if [ $# -lt 1 -o $# -gt 2 ]; then
	program=`basename $0`
	echo "Usage: $program input-file > words-file"
	echo "    or $program directory type > words-file"
	echo "  input-file, type: pdf, po, mo or html"
	echo
	echo "  eg. $program example.pdf > new-words"
	echo "      $program some/directory html > new-words"
	echo
	exit 1
fi

# Single file word extraction
if [ $# -eq 1 ]; then
	file=$1
	filetype=`basename $file | sed "s/.*\.//g"`
	if [ ! -n $filetype ]; then
		echo "Error: Unable to determine file type"
		exit 1
	fi
	extract_words $file $filetype
fi

# Directory recursive extraction
if [ $# -eq 2 ]; then
	dir=$1
	filetype=$2
	if [ ! -d $dir ]; then
		echo "Error: $dir is not a valid directory"
		exit 1
	fi
	search="*.$filetype"
	if [ $filetype == "dat" ]; then
		search="lnk*.$filetype"
	fi
	for file in `find $dir -name "$search"`
	do
		extract_words $file $filetype
	done | sort_uniq_and_add
fi

