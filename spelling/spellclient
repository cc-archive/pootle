#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2007 Zuza Software Foundation, WordForge Foundation
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# translate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""A Spell Checking client

A demonstration and testing client that can send L{spell.SpellRequest}s
and interpret L{spell.SpellResult}s
"""

import spell
import lang
import optparse
import urllib
import __version__

class Client:
    """Base class for client requests
    """
    def __init__(self, url):
        """
        @param url: Spell checker server URL
        @type url: string
        """
        self._url = url
    
    def query(self, request):
        """A client query

        @param request: The client request
        """
        pass

    def results(self):
        """Results of the query

        @return: Raw results
        """
        pass


class SpellClient(Client):
    """Manage spelling queries
    """
    def query(self, request):
        """A spelling query

        @param request: The spelling request
        @type request: SpellRequest
        """
        self.__request = request
        params = urllib.urlencode({"lang": request.lang()})
        try:
            self.__request = urllib.urlopen(self._url + 
                    "?" + params, str(request))
            self.__result = self.__request.read()
            self.__request.close()
        except Exception:
            raise

    def results(self):
        """Results of a spell check query

        @return: Raw spell check results
        @rtype: SpellResult
        """
        return spell.SpellResult(self.__request, self.__result)

class LangClient(Client):
    """Manage language queries
    """
    def query(self):
        """A language list query
        """
        self._connection.request("POST", "/lang")
        self._response = self._connection.getresponse()

    def results(self):
        """Results of a language query

        @return: Raw language results
        @rtype: string
        """
        return self._response.read()

def main():
    """Start the Spell Checking client with command line options
    """
    parser = optparse.OptionParser(version="%prog "+
            __version__.ver, description="Spell checking client")
    defaultserver = "https://www.google.com/tbproxy/spell"
    parser.add_option("-s", "--server", dest="server", default=defaultserver,
            metavar="SERVER", type="string",
            help="Server URL [default: %s]" % defaultserver)
    parser.add_option("-t", "--text", dest="text",
            metavar="TEXT", type="string",
            help="Text to be tested")
    parser.add_option("-r", "--raw", dest="raw",
            metavar="RAW", type="string",
            help="A raw XML SpellRequest to be tested")
    parser.add_option("-p", "--pad", dest="pad",
            metavar="PAD", type="int",
            help="Pad the text string to PAD length")
    defaultlang = "en"
    parser.add_option("-l", "--lang", dest="lang", default=defaultlang,
            metavar="LANG", type="string",
            help="Languages to check [default: %s]" % defaultlang)
    parser.add_option("", "--list", dest="listlang", action="store_true",
            help="List availabe Languages")
    parser.add_option("", "--ignore-allcaps", dest="ignoreallcaps", 
            action="store_true",
            help="Ignore words in ALL CAPITALS")
    parser.add_option("", "--ignore-digits", dest="ignoredigits", 
            action="store_true",
            help="Ignore words with digits")
    parser.add_option("", "--ignore-dups", dest="ignoredups", 
            action="store_true",
            help="Ignore repeated errors")
    (options, args) = parser.parse_args()
    if options.listlang:
        client = LangClient(options.server)
        client.query()
        print str(client.results())
    if options.text:
        if options.pad:
            options.text = ((options.text + " ")*
                    (options.pad/len(options.text + " ")-1))[0:options.pad]
        client = SpellClient(options.server)
        print spell.SpellRequest.create(options.text, options.lang, 
               ignoreallcaps=options.ignoreallcaps, 
               ignoredigits=options.ignoredigits, 
               ignoredups=options.ignoredups)
        client.query(spell.SpellRequest.create(options.text, options.lang, 
               ignoreallcaps=options.ignoreallcaps, 
               ignoredigits=options.ignoredigits, 
               ignoredups=options.ignoredups))
        print str(client.results())
    if options.raw:
        print "--raw is not yet implemented"

if __name__ == "__main__":
    main()
