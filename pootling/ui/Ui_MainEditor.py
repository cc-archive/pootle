# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'unknown'
#
# Created: Tue Jul 31 15:30:04 2007
#      by: PyQt4 UI code generator 4.0
#
# WARNING! All changes made in this file will be lost!

import sys
from PyQt4 import QtCore, QtGui

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(QtCore.QSize(QtCore.QRect(0,0,594,487).size()).expandedTo(MainWindow.minimumSizeHint()))

        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Policy(7),QtGui.QSizePolicy.Policy(7))
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(400,300))
        MainWindow.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        MainWindow.setWindowIcon(QtGui.QIcon("../images/pootling.png"))

        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtGui.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0,0,594,29))
        self.menubar.setObjectName("menubar")

        self.menuBookmark = QtGui.QMenu(self.menubar)
        self.menuBookmark.setObjectName("menuBookmark")

        self.menuGo = QtGui.QMenu(self.menubar)
        self.menuGo.setObjectName("menuGo")

        self.menuFile = QtGui.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")

        self.menuOpen_Recent = QtGui.QMenu(self.menuFile)
        self.menuOpen_Recent.setIcon(QtGui.QIcon("../images/open.png"))
        self.menuOpen_Recent.setObjectName("menuOpen_Recent")

        self.menuHelp = QtGui.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")

        self.menuWindow = QtGui.QMenu(self.menubar)
        self.menuWindow.setObjectName("menuWindow")

        self.menuToolbars = QtGui.QMenu(self.menuWindow)
        self.menuToolbars.setObjectName("menuToolbars")

        self.menu_Tool = QtGui.QMenu(self.menubar)
        self.menu_Tool.setObjectName("menu_Tool")

        self.menuProject = QtGui.QMenu(self.menubar)
        self.menuProject.setObjectName("menuProject")

        self.menuSettings = QtGui.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")

        self.menuView = QtGui.QMenu(self.menubar)
        self.menuView.setEnabled(True)
        self.menuView.setObjectName("menuView")

        self.menuEdit = QtGui.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtGui.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.toolFile = QtGui.QToolBar(MainWindow)
        self.toolFile.setOrientation(QtCore.Qt.Horizontal)
        self.toolFile.setObjectName("toolFile")
        MainWindow.addToolBar(self.toolFile)

        self.toolEdit = QtGui.QToolBar(MainWindow)
        self.toolEdit.setEnabled(True)
        self.toolEdit.setOrientation(QtCore.Qt.Horizontal)
        self.toolEdit.setObjectName("toolEdit")
        MainWindow.addToolBar(self.toolEdit)

        self.toolNavigation = QtGui.QToolBar(MainWindow)
        self.toolNavigation.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.toolNavigation.setAcceptDrops(False)
        self.toolNavigation.setOrientation(QtCore.Qt.Horizontal)
        self.toolNavigation.setObjectName("toolNavigation")
        MainWindow.addToolBar(self.toolNavigation)

        self.toolFilter = QtGui.QToolBar(MainWindow)
        self.toolFilter.setOrientation(QtCore.Qt.Horizontal)
        self.toolFilter.setObjectName("toolFilter")
        MainWindow.addToolBar(self.toolFilter)

        self.actionOpen = QtGui.QAction(MainWindow)
        self.actionOpen.setIcon(QtGui.QIcon("../images/open.png"))
        self.actionOpen.setObjectName("actionOpen")

        self.actionSave = QtGui.QAction(MainWindow)
        self.actionSave.setEnabled(False)
        self.actionSave.setIcon(QtGui.QIcon("../images/save.png"))
        self.actionSave.setObjectName("actionSave")

        self.actionSaveas = QtGui.QAction(MainWindow)
        self.actionSaveas.setEnabled(False)
        self.actionSaveas.setIcon(QtGui.QIcon("../images/filesaveas.png"))
        self.actionSaveas.setObjectName("actionSaveas")

        self.actionExit = QtGui.QAction(MainWindow)
        self.actionExit.setIcon(QtGui.QIcon("../images/exit.png"))
        self.actionExit.setObjectName("actionExit")

        self.actionUndo = QtGui.QAction(MainWindow)
        self.actionUndo.setEnabled(False)
        self.actionUndo.setIcon(QtGui.QIcon("../images/undo.png"))
        self.actionUndo.setObjectName("actionUndo")

        self.actionRedo = QtGui.QAction(MainWindow)
        self.actionRedo.setEnabled(False)
        self.actionRedo.setIcon(QtGui.QIcon("../images/redo.png"))
        self.actionRedo.setObjectName("actionRedo")

        self.actionCut = QtGui.QAction(MainWindow)
        self.actionCut.setEnabled(False)
        self.actionCut.setIcon(QtGui.QIcon("../images/cut.png"))
        self.actionCut.setObjectName("actionCut")

        self.actionCopy = QtGui.QAction(MainWindow)
        self.actionCopy.setCheckable(False)
        self.actionCopy.setEnabled(False)
        self.actionCopy.setIcon(QtGui.QIcon("../images/copy.png"))
        self.actionCopy.setObjectName("actionCopy")

        self.actionPaste = QtGui.QAction(MainWindow)
        self.actionPaste.setEnabled(False)
        self.actionPaste.setIcon(QtGui.QIcon("../images/paste.png"))
        self.actionPaste.setObjectName("actionPaste")

        self.actionFind = QtGui.QAction(MainWindow)
        self.actionFind.setEnabled(False)
        self.actionFind.setIcon(QtGui.QIcon("../images/find.png"))
        self.actionFind.setObjectName("actionFind")

        self.actionAbout = QtGui.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")

        self.actionShowMenuBar = QtGui.QAction(MainWindow)
        self.actionShowMenuBar.setObjectName("actionShowMenuBar")

        self.actionShowTUview = QtGui.QAction(MainWindow)
        self.actionShowTUview.setObjectName("actionShowTUview")

        self.actionAboutQT = QtGui.QAction(MainWindow)
        self.actionAboutQT.setObjectName("actionAboutQT")

        self.actionShow_MenuBar = QtGui.QAction(MainWindow)
        self.actionShow_MenuBar.setObjectName("actionShow_MenuBar")

        self.actionShow_TUview = QtGui.QAction(MainWindow)
        self.actionShow_TUview.setObjectName("actionShow_TUview")

        self.actionFirst = QtGui.QAction(MainWindow)
        self.actionFirst.setEnabled(False)
        self.actionFirst.setIcon(QtGui.QIcon("../images/first.png"))
        self.actionFirst.setObjectName("actionFirst")

        self.actionPrevious = QtGui.QAction(MainWindow)
        self.actionPrevious.setEnabled(False)
        self.actionPrevious.setIcon(QtGui.QIcon("../images/back.png"))
        self.actionPrevious.setObjectName("actionPrevious")

        self.actionNext = QtGui.QAction(MainWindow)
        self.actionNext.setEnabled(False)
        self.actionNext.setIcon(QtGui.QIcon("../images/forward.png"))
        self.actionNext.setObjectName("actionNext")

        self.actionLast = QtGui.QAction(MainWindow)
        self.actionLast.setEnabled(False)
        self.actionLast.setIcon(QtGui.QIcon("../images/last.png"))
        self.actionLast.setObjectName("actionLast")

        self.actionCopySource2Target = QtGui.QAction(MainWindow)
        self.actionCopySource2Target.setEnabled(False)
        self.actionCopySource2Target.setObjectName("actionCopySource2Target")

        self.actionToggleFuzzy = QtGui.QAction(MainWindow)
        self.actionToggleFuzzy.setEnabled(False)
        self.actionToggleFuzzy.setObjectName("actionToggleFuzzy")

        self.actionFile = QtGui.QAction(MainWindow)
        self.actionFile.setObjectName("actionFile")

        self.actionFind_Previous = QtGui.QAction(MainWindow)
        self.actionFind_Previous.setEnabled(False)
        self.actionFind_Previous.setObjectName("actionFind_Previous")

        self.actionFind_Next = QtGui.QAction(MainWindow)
        self.actionFind_Next.setEnabled(False)
        self.actionFind_Next.setObjectName("actionFind_Next")

        self.actionReplace = QtGui.QAction(MainWindow)
        self.actionReplace.setEnabled(False)
        self.actionReplace.setIcon(QtGui.QIcon("../images/replace.png"))
        self.actionReplace.setObjectName("actionReplace")

        self.actionFindNext = QtGui.QAction(MainWindow)
        self.actionFindNext.setEnabled(False)
        self.actionFindNext.setIcon(QtGui.QIcon("../images/next.png"))
        self.actionFindNext.setObjectName("actionFindNext")

        self.actionFindPrevious = QtGui.QAction(MainWindow)
        self.actionFindPrevious.setEnabled(False)
        self.actionFindPrevious.setIcon(QtGui.QIcon("../images/previous.png"))
        self.actionFindPrevious.setObjectName("actionFindPrevious")

        self.actionSelectAll = QtGui.QAction(MainWindow)
        self.actionSelectAll.setEnabled(False)
        self.actionSelectAll.setObjectName("actionSelectAll")

        self.actionEdit_Header = QtGui.QAction(MainWindow)
        self.actionEdit_Header.setEnabled(False)
        self.actionEdit_Header.setObjectName("actionEdit_Header")

        self.actionPreferences = QtGui.QAction(MainWindow)
        self.actionPreferences.setIcon(QtGui.QIcon("../images/configure.png"))
        self.actionPreferences.setObjectName("actionPreferences")

        self.actionToolbars = QtGui.QAction(MainWindow)
        self.actionToolbars.setObjectName("actionToolbars")

        self.actionFilterFuzzy = QtGui.QAction(MainWindow)
        self.actionFilterFuzzy.setCheckable(True)
        self.actionFilterFuzzy.setChecked(True)
        self.actionFilterFuzzy.setEnabled(False)
        self.actionFilterFuzzy.setIcon(QtGui.QIcon("../images/fuzzy.png"))
        self.actionFilterFuzzy.setObjectName("actionFilterFuzzy")

        self.actionFilterTranslated = QtGui.QAction(MainWindow)
        self.actionFilterTranslated.setCheckable(True)
        self.actionFilterTranslated.setChecked(True)
        self.actionFilterTranslated.setEnabled(False)
        self.actionFilterTranslated.setIcon(QtGui.QIcon("../images/translated.png"))
        self.actionFilterTranslated.setObjectName("actionFilterTranslated")

        self.actionFilterUntranslated = QtGui.QAction(MainWindow)
        self.actionFilterUntranslated.setCheckable(True)
        self.actionFilterUntranslated.setChecked(True)
        self.actionFilterUntranslated.setEnabled(False)
        self.actionFilterUntranslated.setIcon(QtGui.QIcon("../images/untranslated.png"))
        self.actionFilterUntranslated.setObjectName("actionFilterUntranslated")

        self.action_Close = QtGui.QAction(MainWindow)
        self.action_Close.setEnabled(False)
        self.action_Close.setIcon(QtGui.QIcon("../images/fileclose.png"))
        self.action_Close.setObjectName("action_Close")

        self.actionGoTo = QtGui.QAction(MainWindow)
        self.actionGoTo.setEnabled(False)
        self.actionGoTo.setObjectName("actionGoTo")

        self.actionAddBookmarks = QtGui.QAction(MainWindow)
        self.actionAddBookmarks.setEnabled(False)
        self.actionAddBookmarks.setIcon(QtGui.QIcon("../images/bookmarkadd.png"))
        self.actionAddBookmarks.setObjectName("actionAddBookmarks")

        self.actionClearBookmarks = QtGui.QAction(MainWindow)
        self.actionClearBookmarks.setObjectName("actionClearBookmarks")

        self.actionAuto_translate = QtGui.QAction(MainWindow)
        self.actionAuto_translate.setObjectName("actionAuto_translate")

        self.actionCatalogManager = QtGui.QAction(MainWindow)
        self.actionCatalogManager.setObjectName("actionCatalogManager")

        self.actionBuild_TM = QtGui.QAction(MainWindow)
        self.actionBuild_TM.setObjectName("actionBuild_TM")

        self.actionGlossary = QtGui.QAction(MainWindow)
        self.actionGlossary.setEnabled(True)
        self.actionGlossary.setObjectName("actionGlossary")

        self.actionCopySearchResult2Target = QtGui.QAction(MainWindow)
        self.actionCopySearchResult2Target.setEnabled(False)
        self.actionCopySearchResult2Target.setIcon(QtGui.QIcon("../images/source.png"))
        self.actionCopySearchResult2Target.setObjectName("actionCopySearchResult2Target")

        self.actionBuild_TM1 = QtGui.QAction(MainWindow)
        self.actionBuild_TM1.setIcon(QtGui.QIcon("../images/memory.png"))
        self.actionBuild_TM1.setObjectName("actionBuild_TM1")

        self.actionGlossary1 = QtGui.QAction(MainWindow)
        self.actionGlossary1.setObjectName("actionGlossary1")

        self.actionAuto_translate1 = QtGui.QAction(MainWindow)
        self.actionAuto_translate1.setObjectName("actionAuto_translate1")

        self.actionNewPro = QtGui.QAction(MainWindow)
        self.actionNewPro.setObjectName("actionNewPro")

        self.actionOpenPro = QtGui.QAction(MainWindow)
        self.actionOpenPro.setObjectName("actionOpenPro")

        self.actionClear_Fuzzies = QtGui.QAction(MainWindow)
        self.actionClear_Fuzzies.setEnabled(False)
        self.actionClear_Fuzzies.setObjectName("actionClear_Fuzzies")
        self.menuBookmark.addAction(self.actionAddBookmarks)
        self.menuBookmark.addAction(self.actionClearBookmarks)
        self.menuBookmark.addSeparator()
        self.menuGo.addAction(self.actionFirst)
        self.menuGo.addAction(self.actionPrevious)
        self.menuGo.addAction(self.actionNext)
        self.menuGo.addAction(self.actionLast)
        self.menuGo.addSeparator()
        self.menuGo.addAction(self.actionGoTo)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.menuOpen_Recent.menuAction())
        self.menuFile.addAction(self.action_Close)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSaveas)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuHelp.addAction(self.actionAbout)
        self.menuHelp.addAction(self.actionAboutQT)
        self.menuWindow.addSeparator()
        self.menuWindow.addSeparator()
        self.menuWindow.addAction(self.menuToolbars.menuAction())
        self.menu_Tool.addSeparator()
        self.menu_Tool.addAction(self.actionCatalogManager)
        self.menu_Tool.addAction(self.actionAuto_translate)
        self.menuProject.addAction(self.actionNewPro)
        self.menuProject.addAction(self.actionOpenPro)
        self.menuSettings.addAction(self.actionPreferences)
        self.menuSettings.addAction(self.actionBuild_TM)
        self.menuSettings.addAction(self.actionGlossary)
        self.menuView.addAction(self.actionFilterUntranslated)
        self.menuView.addAction(self.actionFilterFuzzy)
        self.menuView.addAction(self.actionFilterTranslated)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionFind)
        self.menuEdit.addAction(self.actionFindPrevious)
        self.menuEdit.addAction(self.actionFindNext)
        self.menuEdit.addAction(self.actionReplace)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCopySource2Target)
        self.menuEdit.addAction(self.actionCopySearchResult2Target)
        self.menuEdit.addAction(self.actionToggleFuzzy)
        self.menuEdit.addAction(self.actionClear_Fuzzies)
        self.menuEdit.addAction(self.actionEdit_Header)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuGo.menuAction())
        self.menubar.addAction(self.menuBookmark.menuAction())
        self.menubar.addAction(self.menuProject.menuAction())
        self.menubar.addAction(self.menu_Tool.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuWindow.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.toolFile.addAction(self.actionSave)
        self.toolFile.addAction(self.actionSaveas)
        self.toolEdit.addAction(self.actionUndo)
        self.toolEdit.addAction(self.actionRedo)
        self.toolEdit.addAction(self.actionCut)
        self.toolEdit.addAction(self.actionCopy)
        self.toolEdit.addAction(self.actionPaste)
        self.toolNavigation.addAction(self.actionFirst)
        self.toolNavigation.addAction(self.actionPrevious)
        self.toolNavigation.addAction(self.actionNext)
        self.toolNavigation.addAction(self.actionLast)
        self.toolFilter.addAction(self.actionFilterUntranslated)
        self.toolFilter.addAction(self.actionFilterFuzzy)
        self.toolFilter.addAction(self.actionFilterTranslated)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def tr(self, string):
        return QtGui.QApplication.translate("MainWindow", string, None, QtGui.QApplication.UnicodeUTF8)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(self.tr("Form"))
        self.menuBookmark.setTitle(self.tr("&Bookmarks"))
        self.menuGo.setTitle(self.tr("&Go"))
        self.menuFile.setTitle(self.tr("&File"))
        self.menuOpen_Recent.setStatusTip(self.tr("Open the file that used to be opened."))
        self.menuOpen_Recent.setWhatsThis(self.tr("<h3>Open Recent</h>Use this to open the file that used to be opened."))
        self.menuOpen_Recent.setTitle(self.tr("Open &Recent"))
        self.menuHelp.setTitle(self.tr("&Help"))
        self.menuWindow.setTitle(self.tr("&Window"))
        self.menuToolbars.setStatusTip(self.tr("Hide/Show the toolbars"))
        self.menuToolbars.setTitle(self.tr("&Toolbars"))
        self.menu_Tool.setTitle(self.tr("&Tool"))
        self.menuProject.setTitle(self.tr("&Project"))
        self.menuSettings.setTitle(self.tr("&Settings"))
        self.menuView.setTitle(self.tr("&View"))
        self.menuEdit.setTitle(self.tr("&Edit"))
        self.toolFile.setWindowTitle(self.tr("&File Toolbar"))
        self.toolFile.setToolTip(self.tr("Save"))
        self.toolFile.setStatusTip(self.tr("Save"))
        self.toolFile.setWhatsThis(self.tr("<h3>Save File</h3>Save the contents of current editor."))
        self.toolEdit.setWindowTitle(self.tr("&Edit Toolbar"))
        self.toolNavigation.setWindowTitle(self.tr("&Navigation Toolbar"))
        self.toolFilter.setWindowTitle(self.tr("Fil&ter Toolbar"))
        self.actionOpen.setText(self.tr("&Open..."))
        self.actionOpen.setIconText(self.tr("Open"))
        self.actionOpen.setToolTip(self.tr("Open"))
        self.actionOpen.setStatusTip(self.tr("Open a file."))
        self.actionOpen.setWhatsThis(self.tr("<h3>Open</h3>Use this to open existed file for edit."))
        self.actionOpen.setShortcut(self.tr("Ctrl+O"))
        self.actionSave.setText(self.tr("&Save"))
        self.actionSave.setStatusTip(self.tr("Save the current file."))
        self.actionSave.setWhatsThis(self.tr("<h3>Save</h3>Use this to save the current file."))
        self.actionSave.setShortcut(self.tr("Ctrl+S"))
        self.actionSaveas.setText(self.tr("Save &As..."))
        self.actionSaveas.setIconText(self.tr("Save As..."))
        self.actionSaveas.setToolTip(self.tr("Save As..."))
        self.actionSaveas.setStatusTip(self.tr("Save the current contents to a new file."))
        self.actionSaveas.setWhatsThis(self.tr("<h3>Save As</h3>Use this to save the current contents to a new file. The file name can be entered in a file selection dialog."))
        self.actionSaveas.setShortcut(self.tr("Ctrl+Shift+S"))
        self.actionExit.setText(self.tr("&Quit"))
        self.actionExit.setToolTip(self.tr("Quit"))
        self.actionExit.setStatusTip(self.tr("Quit the application."))
        self.actionExit.setWhatsThis(self.tr("<h3>Quit</h3>Use this to quit the application. Any unsaved changes will be prompted."))
        self.actionExit.setShortcut(self.tr("Ctrl+Q"))
        self.actionUndo.setText(self.tr("&Undo"))
        self.actionUndo.setStatusTip(self.tr("Undo the last change."))
        self.actionUndo.setWhatsThis(self.tr("<h3>Undo</h3>Use this to undo the last change done in the editor."))
        self.actionUndo.setShortcut(self.tr("Ctrl+Z"))
        self.actionRedo.setText(self.tr("Re&do"))
        self.actionRedo.setStatusTip(self.tr("Redo the last change."))
        self.actionRedo.setWhatsThis(self.tr("<h3>Redo</h3>Use this to redo the last change done in the editor."))
        self.actionRedo.setShortcut(self.tr("Ctrl+Shift+Z"))
        self.actionCut.setText(self.tr("Cu&t"))
        self.actionCut.setStatusTip(self.tr("Cut the selected text."))
        self.actionCut.setWhatsThis(self.tr("<h3>Cut</h3>Use this to cut the selected text to the clipboard."))
        self.actionCut.setShortcut(self.tr("Ctrl+X"))
        self.actionCopy.setText(self.tr("&Copy"))
        self.actionCopy.setStatusTip(self.tr("Copy the selected text."))
        self.actionCopy.setWhatsThis(self.tr("<h3>Copy</h3>Use this to copy the selected text to the clipboard."))
        self.actionCopy.setShortcut(self.tr("Ctrl+C"))
        self.actionPaste.setText(self.tr("&Paste"))
        self.actionPaste.setIconText(self.tr("Paste"))
        self.actionPaste.setToolTip(self.tr("Paste"))
        self.actionPaste.setStatusTip(self.tr("Paste the last cut/copied text."))
        self.actionPaste.setWhatsThis(self.tr("<h3>Paste</h3>Use this to paste the last cut/copies text from the clipboard to the editor."))
        self.actionPaste.setShortcut(self.tr("Ctrl+V"))
        self.actionFind.setText(self.tr("&Find"))
        self.actionFind.setStatusTip(self.tr("Find text in the shown strings."))
        self.actionFind.setWhatsThis(self.tr("<h3>Find</h3>Use this to find text in the shown strings. The find dialog will show at the bottom of the editor."))
        self.actionFind.setShortcut(self.tr("Ctrl+F"))
        self.actionAbout.setText(self.tr("&About Pootling"))
        self.actionAbout.setStatusTip(self.tr("Display some information about this software."))
        self.actionAbout.setWhatsThis(self.tr("<h3>About Pootling</h3>Display some information about this software."))
        self.actionShowMenuBar.setText(self.tr("Show MenuBar"))
        self.actionShowMenuBar.setShortcut(self.tr("Ctrl+M"))
        self.actionShowTUview.setText(self.tr("Show TUview"))
        self.actionShowTUview.setShortcut(self.tr("Ctrl+T"))
        self.actionAboutQT.setText(self.tr("About &Qt"))
        self.actionAboutQT.setIconText(self.tr("About Qt"))
        self.actionAboutQT.setStatusTip(self.tr("Display some information about the Qt Toolkit."))
        self.actionAboutQT.setWhatsThis(self.tr("<h3>About Qt</h3>Display some information about the Qt Toolkit."))
        self.actionShow_MenuBar.setText(self.tr("Show MenuBar"))
        self.actionShow_TUview.setText(self.tr("Show TUview"))
        self.actionFirst.setText(self.tr("&First"))
        self.actionFirst.setToolTip(self.tr("First"))
        self.actionFirst.setStatusTip(self.tr("Go to the first string."))
        self.actionFirst.setWhatsThis(self.tr("<h3>First</h3>Go to the first string in the table."))
        self.actionFirst.setShortcut(self.tr("Ctrl+PgUp"))
        self.actionPrevious.setText(self.tr("&Previous"))
        self.actionPrevious.setStatusTip(self.tr("Go to the previous string."))
        self.actionPrevious.setWhatsThis(self.tr("<h3>Previous</h3>Go to the previous string in the table."))
        self.actionPrevious.setShortcut(self.tr("PgUp"))
        self.actionNext.setText(self.tr("&Next"))
        self.actionNext.setStatusTip(self.tr("Go to the next string."))
        self.actionNext.setWhatsThis(self.tr("<h3>Next</h3>Go to the next string in the table."))
        self.actionNext.setShortcut(self.tr("PgDown"))
        self.actionLast.setText(self.tr("&Last"))
        self.actionLast.setStatusTip(self.tr("Go to the last string."))
        self.actionLast.setWhatsThis(self.tr("<h3>Last</h3>Go to the last string in the table."))
        self.actionLast.setShortcut(self.tr("Ctrl+PgDown"))
        self.actionCopySource2Target.setText(self.tr("Cop&y Source To Target"))
        self.actionCopySource2Target.setIconText(self.tr("Copy Source To Target"))
        self.actionCopySource2Target.setToolTip(self.tr("Copy Source To Target"))
        self.actionCopySource2Target.setStatusTip(self.tr("Copy current string from source field to target field."))
        self.actionCopySource2Target.setWhatsThis(self.tr("<h3>Copy Source To Target</h3>Use this to copy current string from source field to target field."))
        self.actionCopySource2Target.setShortcut(self.tr("F2"))
        self.actionToggleFuzzy.setText(self.tr("To&ggle Fuzzy"))
        self.actionToggleFuzzy.setIconText(self.tr("Toggle Fuzzy"))
        self.actionToggleFuzzy.setToolTip(self.tr("Toggle Fuzzy"))
        self.actionToggleFuzzy.setStatusTip(self.tr("Toggle fuzzy for current string."))
        self.actionToggleFuzzy.setWhatsThis(self.tr("<h3>Toggle Fuzzy</h3>Use this to set current string to fuzzy or unset it."))
        self.actionToggleFuzzy.setShortcut(self.tr("Ctrl+U"))
        self.actionFile.setText(self.tr("file"))
        self.actionFind_Previous.setText(self.tr("Find Previous"))
        self.actionFind_Next.setText(self.tr("Find Next"))
        self.actionReplace.setText(self.tr("&Replace"))
        self.actionReplace.setStatusTip(self.tr("Replace text in the shown strings."))
        self.actionReplace.setWhatsThis(self.tr("<h3>Replace</h3>Use this to find text in the shown strings to replace. The find and replace dialog will show at the bottom of the editor."))
        self.actionReplace.setShortcut(self.tr("Ctrl+R"))
        self.actionFindNext.setText(self.tr("Find &Next"))
        self.actionFindNext.setIconText(self.tr("Find Next"))
        self.actionFindNext.setToolTip(self.tr("Find Next"))
        self.actionFindNext.setStatusTip(self.tr("Find next occurrance of text."))
        self.actionFindNext.setWhatsThis(self.tr("<h3>Find Next</h3>Use this to find the next occurrance of search text in the shown strings."))
        self.actionFindNext.setShortcut(self.tr("F3"))
        self.actionFindPrevious.setText(self.tr("Find Pre&vious"))
        self.actionFindPrevious.setStatusTip(self.tr("Find previous occurrance of text."))
        self.actionFindPrevious.setWhatsThis(self.tr("<h3>Find Previous</h3>Use this to find the previous occurrance of search text in the shown strings."))
        self.actionFindPrevious.setShortcut(self.tr("Shift+F3"))
        self.actionSelectAll.setText(self.tr("Select &All"))
        self.actionSelectAll.setStatusTip(self.tr("Select all text"))
        self.actionSelectAll.setWhatsThis(self.tr("<h3>Select all text</h3>Select all text in the current window."))
        self.actionSelectAll.setShortcut(self.tr("Ctrl+A"))
        self.actionEdit_Header.setText(self.tr("&Header..."))
        self.actionEdit_Header.setStatusTip(self.tr("Open header dialog."))
        self.actionEdit_Header.setWhatsThis(self.tr("<h3>Open header dialog</h3>Use this to open the dialog to edit the header information."))
        self.actionEdit_Header.setShortcut(self.tr("Ctrl+H"))
        self.actionPreferences.setText(self.tr("&Preferences..."))
        self.actionPreferences.setStatusTip(self.tr("Set common options for personality, font and color, translation memory and glossary, and save."))
        self.actionPreferences.setWhatsThis(self.tr("<h3>Preferences</h3>Use this to set common options for personality, font and color, translation memory and glossary, and save."))
        self.actionToolbars.setText(self.tr("Toolbars"))
        self.actionFilterFuzzy.setText(self.tr("&Fuzzy"))
        self.actionFilterFuzzy.setToolTip(self.tr("Show/Hide fuzzy strings"))
        self.actionFilterFuzzy.setStatusTip(self.tr("Show or hide the fuzzy strings."))
        self.actionFilterFuzzy.setWhatsThis(self.tr("<h3>Fuzzy</h3>Use this to show or hide the fuzzy strings."))
        self.actionFilterFuzzy.setShortcut(self.tr("Ctrl+Alt+F"))
        self.actionFilterTranslated.setText(self.tr("&Translated"))
        self.actionFilterTranslated.setToolTip(self.tr("Show/Hide translated strings"))
        self.actionFilterTranslated.setStatusTip(self.tr("Show or hide the translated strings."))
        self.actionFilterTranslated.setWhatsThis(self.tr("<h3>Translated</h3>Use this show or hide the translated strings."))
        self.actionFilterTranslated.setShortcut(self.tr("Ctrl+Alt+T"))
        self.actionFilterUntranslated.setText(self.tr("&Untranslated"))
        self.actionFilterUntranslated.setToolTip(self.tr("Show/Hide untranslated strings"))
        self.actionFilterUntranslated.setStatusTip(self.tr("Show or hide the untranslated strings."))
        self.actionFilterUntranslated.setWhatsThis(self.tr("<h3>Untranslated</h3>Use this to show or hide the untranslated strings."))
        self.actionFilterUntranslated.setShortcut(self.tr("Ctrl+Alt+U"))
        self.action_Close.setText(self.tr("&Close"))
        self.action_Close.setStatusTip(self.tr("Close the current opened file."))
        self.action_Close.setWhatsThis(self.tr("<h3>Close the current file</h3>Use this to close the current opened file."))
        self.action_Close.setShortcut(self.tr("Ctrl+W"))
        self.actionGoTo.setText(self.tr("&String Number..."))
        self.actionGoTo.setIconText(self.tr("String Number"))
        self.actionGoTo.setToolTip(self.tr("String Number"))
        self.actionGoTo.setStatusTip(self.tr("Go to string number..."))
        self.actionGoTo.setWhatsThis(self.tr("<h3>GoTo String</h3>Go to the string number specified by user."))
        self.actionGoTo.setShortcut(self.tr("Ctrl+G"))
        self.actionAddBookmarks.setText(self.tr("&Add Bookmarks"))
        self.actionAddBookmarks.setStatusTip(self.tr("Add a bookmark of the current string."))
        self.actionAddBookmarks.setWhatsThis(self.tr("<h3>Add Bookmarks</h3>Use this to add a bookmark of the current string"))
        self.actionAddBookmarks.setShortcut(self.tr("Ctrl+B"))
        self.actionClearBookmarks.setText(self.tr("&Clear Bookmarks"))
        self.actionClearBookmarks.setStatusTip(self.tr("Clear all the bookmarks."))
        self.actionClearBookmarks.setWhatsThis(self.tr("<h3>Clear Bookmarks</h3>Use this to clear all the bookmarks."))
        self.actionAuto_translate.setText(self.tr("&Auto Translate"))
        self.actionCatalogManager.setText(self.tr("Catalog Manager..."))
        self.actionCatalogManager.setStatusTip(self.tr("Open catalog manager."))
        self.actionCatalogManager.setWhatsThis(self.tr("<h3>Catalog Manager</h3>Use this to open catalog manager."))
        self.actionBuild_TM.setText(self.tr("Build &TM"))
        self.actionGlossary.setText(self.tr("Gl&ossary"))
        self.actionCopySearchResult2Target.setText(self.tr("Copy &Translation To Target"))
        self.actionCopySearchResult2Target.setIconText(self.tr("Copy Translation To Target"))
        self.actionCopySearchResult2Target.setToolTip(self.tr("Copy Translation To Target"))
        self.actionCopySearchResult2Target.setStatusTip(self.tr("Copy the most similar translation to target field."))
        self.actionCopySearchResult2Target.setWhatsThis(self.tr("<h3>Copy Translation To Target</h3>Use this to copy the most similar translation to target field."))
        self.actionBuild_TM1.setText(self.tr("Build TM"))
        self.actionBuild_TM1.setToolTip(self.tr("Build the translation memory."))
        self.actionBuild_TM1.setStatusTip(self.tr("Build the translation memory."))
        self.actionBuild_TM1.setWhatsThis(self.tr("<h3>Build TM</h3>Use this to build the translation memory."))
        self.actionGlossary1.setText(self.tr("Build Gl&ossary..."))
        self.actionGlossary1.setToolTip(self.tr("Build the glossary."))
        self.actionGlossary1.setStatusTip(self.tr("Build the glossary."))
        self.actionGlossary1.setWhatsThis(self.tr("<h3>Build Glossary</h3>Use this to build the glossary."))
        self.actionAuto_translate1.setText(self.tr("Auto Translate"))
        self.actionAuto_translate1.setStatusTip(self.tr("Translate the whole strings automatically."))
        self.actionAuto_translate1.setWhatsThis(self.tr("<h3></h3>Use this to translate the whole strings automatically."))
        self.actionNewPro.setText(self.tr("&New...   "))
        self.actionNewPro.setStatusTip(self.tr("This opens a dialog for entering  the information for a new project."))
        self.actionNewPro.setWhatsThis(self.tr("<h3>New...</h3>Use this to open a dialog for entering  the information for a new project."))
        self.actionOpenPro.setText(self.tr("&Open...   "))
        self.actionOpenPro.setStatusTip(self.tr("This open an existing project."))
        self.actionOpenPro.setWhatsThis(self.tr("<h3>Open</h3>Use this to open an existing project."))
        self.actionClear_Fuzzies.setText(self.tr("Clear All Fuzzies"))


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    MainWindow = QtGui.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
