#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2005 Dwayne Bailey
#
# This file is part of the translate toolkit
#
# The translate toolkit is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# translate is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with translate; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""A simple client that can query the spelling server to provide checking and suggestion
information"""

import socket
import optparse
import sys


def main():
  optParser = optparse.OptionParser()
  default_hostname = "localhost"
  default_port = 8000
  optParser.add_option("", "--host", action="store", dest="hostname", default=default_hostname, metavar="HOST", type="string",
      help="the spelling servers hostname (default: %s)" % default_hostname)
  optParser.add_option("-p", "--port", action="store", dest="port", default=default_port, metavar="PORT", type="int", help="the spelling servers port (default: %d)" % default_port)
  optParser.add_option("-f", "--file", action="store", type="string", dest="queryfile", help="a list of words to be validates")
  optParser.add_option("-w", "--word", action="store", type="string", dest="queryword", help="a single word to be validate")
  optParser.add_option("-l", "--language", action="store", type="string", dest="language", help="the language that you want to spell against. If not specified the default langauge will be used.")
  optParser.add_option("-s", "--suggest", action="store_true", dest="suggest", help="make suggestions")
  optParser.add_option("-c", "--check", action="store_true", dest="check", help="only check do not suggest")
  (options, remainingArgs) = optParser.parse_args()

  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  if not options.queryword and not options.queryfile:
    print "Need at least one query word or file"
    sys.exit()
  if options.suggest and options.check:
    print "You can only check or suggest, not both"
    sys.exit()
  if options.suggest:
    command = 'SUGGEST'
  else:
    if options.check:
      command = 'CHECK'
    else:
      command = 'CHECK'
  s.connect((options.hostname, options.port))
  if options.language:
    s.send('LANG>%s\r\n' % options.language)
  data = s.makefile()
  if options.queryfile:
    fh = open(options.queryfile)
    for line in fh.readlines():
      s.send('%s>%s' % (command, line))
  if options.queryword:
    s.send('%s>%s\r\n' % (command, options.queryword))
  s.send('\r\n\r\n')
  for line in data.readlines():
    print line,
  s.close()

if __name__ == "__main__":
  main()
